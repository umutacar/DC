\documentclass{course}
\title{Parallel and Sequential Algorithms}

% Course number must be unique in the database
\coursenumber{15210}

\semester{Spring2018}
\picture{/210/course/air-pavilion.jpg}
\website{http://www.cs.cmu.edu/~15210}

% Provides book
% This must be provided
% The name should be relative to course number.
\providesbook{S18}

\providesassignment{4}

\begin{book}
\title{Algorithm Design: Parallel and Sequential}
\label{15210-2016}
\unique{15210S18}
\authors{Umut A. Acar and Guy Blelloch}

\begin{assignment}
\title{BignumLab (Written)}
\duedate{9 February 2018}

\begin{asstproblem}
\title{Karatsuba}
\begin{questionfr}
\points 10
\prompt
For each of the following recurrences, state whether
the recurrence is leaf-dominated, root-dominated, or balanced, and what complexity class
each belongs to.
\begin{align*}
  W(n) &= 3\;W\left(\frac n 2\right) + O(n) \\
  S(n) &= S\left(\frac n 2\right) + O(\log n)
\end{align*}
\answer
  Solve it yourself lol
\end{questionfr}
\end{asstproblem}


\begin{asstproblem}
\title{Bignum Widths}
\info
Note that we need $1 + \lfloor \log_2 x \rfloor$ bits to represent a number $x \geq 1$.
\begin{questionfr}
\points 5
\prompt
Consider 2 bignums, each with bit width at most $w$. Carefully
show that their sum has a bit width of at most $1 + w$.
\answer
The case for $w = 0$ is trivial. Assume from now on that $w \geq 1$.
Without loss of generality, assume we have two bignums $x \geq y$. We have
$w = 1 + \lfloor \log_2 x \rfloor$. The the number of bits required to represent
$x+y$ is
\begin{align*}
  1 + \lfloor \log_2(x + y) \rfloor
  &\leq 1 + \lfloor \log_2(2x) \rfloor \\
  &=    1 + \lfloor 1 + \log_2 x \rfloor \\
  &=    1 + \big(1 + \lfloor \log_2 x \rfloor \big) \\
  &=    1 + w
\end{align*}
\end{questionfr}

\begin{questionfr}
\points 10
\prompt
Consider $k$ bignums, each with bit width at most $w$.
Carefully show that their sum has a bit width of at most
$1 + w + \lfloor \log_2 k \rfloor$.
\answer
The case for $w=0$ is trivial. Assume from now on that $w \geq 1$.

Begin by labeling our bignums $x_i : 1 \leq i \leq k$. Note that each of
these is bounded by $1 \leq x_i \leq 2^w - 1$. The number of bits required
to represent their sum is
\begin{align*}
  1 + \lfloor \log_2 \left( \sum_{i=1}^{k} x_i \right) \rfloor
  &\leq 1 + \lfloor \log_2 \left( k \left( 2^w - 1 \right) \right) \rfloor \\
  &\leq 1 + \lfloor \log_2 \left( k 2^w \right) \rfloor \\
  &=    1 + \lfloor w + \log_2 k \rfloor \\
  &=    1 + w + \lfloor \log_2 k \rfloor
\end{align*}
\end{questionfr}
\end{asstproblem}

\begin{asstproblem}
\title{The Cost of scan}
\info

For the sake of readability in this section, we write $++$ for
bignum addition and $\overline x$ for a bignum of value $x$.

Consider a sequence $S$ of $n$ bignums, each of which has bit width upper
bounded by $m$. We are interested in analyzing the work of (\cd{scan
$++$ $0$ $S$}). Specifically, we want to show that the
work of this expression satisfies the following recurrence, which you will then
solve for a tight Big-$O$ bound.
\[ W(n,m) = W(n/2, m+1) + O(nm + n \log n) \]
To simplify the problem, let's assume $n$ is a power of 2. Below is a
modification of the code for \sml{scan} from lecture, where we've replaced the
associative function and identity with $++$ and $\overline 0$,
respectively.

\[
\begin{array}{1}
\cd{(*Assume |S| is a power of 2*)}
\\
\cd{fun bignumAdditionScan S =}
\\
~~\cd{case |S| of}
\\
~~~~\cd{0 => $\big( \langle\;\rangle, \overline 0 \big)$}
\\
~~~~\cd{1 => $\big( \left\langle \overline 0 \right\rangle, S[0] \big)$}
\\
~~~~\cd{$n$ =>}
\\
~~~~\cd{let}
\\
~~~~~~\cd{val $S'$ = $\big\langle S[2i] ++ S[2i+1] : 0 \leq i < n/2 \big\rangle$}
\\
~~~~~~\cd{val $(R, t)$ = bignumAdditionScan $S'$}
\\
~~~~~~\cd{fun $P(i)$ = if $\text{even}(i)$ then $R[i/2]$ else $R[\lfloor i/2 \rfloor] ++ S[i-1]$}
\\
~~~~\cd{in}
\\
~~~~~~\cd{$\left( \big\langle P(i) : 0 \leq i < n \big\rangle, t \right)$}
\\
~~~~\cd{end}
\end{array}
\]

%\begin{lstlisting}
%% Assume @$|S|$@ is a power of 2
%fun bignumAdditionScan @$S$@ =
%  case @$|S|$@ of
%  | @$1$@ => @$\big( \left\langle \overline 0 \right\rangle, S[0] \big)$@
%  | @$n$@ =>
%      let
%        val @$S'$@ = @$\big\langle S[2i] \mdoubleplus S[2i+1] : 0 \leq i < n/2 \big\rangle$@
%        val @$(R, t)$@ = bignumAdditionScan @$S'$@
%        fun @$P(i)$@ = if @$\text{even}(i)$@ then @$R[i/2]$@ else @$R[\floor{i/2}] \mdoubleplus S[i-1]$@
%      in
%        @$\left( \big\langle P(i) : 0 \leq i < n \big\rangle, t \right)$@
%      end
%\end{lstlisting}

\begin{questionfr}
\points 10
\prompt
Show that the \emph{contraction} step (line 8) requires $O(nm)$ work.
\answer
Each $S[i]$ has bit width $m$, therefore for every $i$,
\[ W\left(S[2i] \mdoubleplus S[2i+1]\right) \in O(m). \]
There are $\floor{n/2}$ of these applications of $\mdoubleplus$, therefore
we have a total of $O(n) \cdot O(m) = O(nm)$ work.
\end{questionfr}

\begin{questionfr}
\points 5
\prompt
Argue that the \emph{recursive} step (line 9) requires $W(n/2, m+1)$ work.
\answer
We previously showed that adding two bignums increases the max bit width by
at most 1. Therefore we recurse on a sequence of half the size, where each
bignum has a bit width of at most $m+1$.
\end{questionfr}

\begin{questionfr}
\points 10
\prompt
Upper bound the bit width of $R[i]$ in terms of $m$ and $i$.
Give an exact bound; don't use asymptotics.
\answer
When $i = 0$, the length of $R[i]$ is zero. Suppose $i > 0$.
Note that by the specification of scan, we know that $R[i]$ is the sum of $2i$
bignums of bit width at most $m$. Using a previous result, we know that the
width of $R[i]$ is upper bounded by
\[ 1 + m + \floor{\log_2 (2i)} = 2 + m + \floor{\log_2 i}. \]
\end{questionfr}

\begin{questionfr}
\points 15
\prompt
Show that the \emph{expansion} step (line 12) requires $O(nm + n \log n)$
work.
\answer
The work of this step is dominated by
\[ W(0 \mdoubleplus S[0]) + \sum_{i=1}^{n/2 - 1} W(R[i] \mdoubleplus S[2i]) \]
Note that we showed the bit width of $R[i]$ in the previous task, and every
element of $S$ has bit width $m$, therefore the work of this step is
\begin{align*}
  O\left(m + \sum_{i=1}^{n/2 - 1} m + \log i \right)
  &= O\left(\sum_{i=1}^n m + \log n \right) \\
  &= O\left(n(m + \log n)\right) \\
  &= O\left(nm + n\log n\right)
\end{align*}
\end{questionfr}

\begin{questionfr}
\points 10
\prompt
It follows from the previous tasks that
the work of \mbox{(\sml{scan $\mdoubleplus$ $\overline 0$ $S$})} is given by the
recurrence
\[ W(n,m) = W(n/2, m+1) + O(nm + n \log n). \]
Solve this recurrence, giving a tight Big-$O$ bound in terms of $n$ and $m$.
\answer
Tree/brick method: the work at the $i^\text{th}$ level, counting from level 0
at the top of the tree, is
\begin{align*}
  \frac n {2^i} (m + i) + \frac n {2^i} \log \left( \frac n {2^i} \right)
  &= \frac {nm + ni + n \log n - ni} {2^i} \\
  &= \frac {nm + n \log n} {2^i}
\end{align*}
which by the brick method is clearly root dominated, therefore the work is
\[ O(nm + n \log n).\]
\end{questionfr}
\end{asstproblem}
\end{assignment}
\end{book}
