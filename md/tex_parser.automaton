State 0:
top' -> . top [ # ]
-- On top shift to state 1
-- On emptylines shift to state 2
-- On NEWLINE reduce production emptylines -> 
-- On KW_HEADING reduce production emptylines -> 
-- On HSPACE reduce production emptylines -> 
-- On EOF reduce production emptylines -> 

State 1:
top' -> top . [ # ]
-- On # accept top

State 2:
emptylines -> emptylines . emptyline [ NEWLINE KW_HEADING HSPACE EOF ]
top -> emptylines . segments EOF [ # ]
-- On KW_HEADING shift to state 3
-- On segments shift to state 4
-- On segment shift to state 6
-- On hspaces shift to state 50
-- On heading shift to state 8
-- On emptyline shift to state 44
-- On NEWLINE reduce production hspaces -> 
-- On HSPACE reduce production hspaces -> 
-- On EOF reduce production segments -> 

State 3:
heading -> KW_HEADING . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production heading -> KW_HEADING 
-- On PAR_ENV reduce production heading -> KW_HEADING 
-- On NEWLINE reduce production heading -> KW_HEADING 
-- On KW_HEADING reduce production heading -> KW_HEADING 
-- On KW_BEGIN_GROUP reduce production heading -> KW_HEADING 
-- On HSPACE reduce production heading -> KW_HEADING 
-- On EOF reduce production heading -> KW_HEADING 

State 4:
top -> emptylines segments . EOF [ # ]
-- On EOF shift to state 5

State 5:
top -> emptylines segments EOF . [ # ]
-- On # reduce production top -> emptylines segments EOF 

State 6:
segments -> segment . segments [ EOF ]
-- On KW_HEADING shift to state 3
-- On segments shift to state 7
-- On segment shift to state 6
-- On heading shift to state 8
-- On EOF reduce production segments -> 

State 7:
segments -> segment segments . [ EOF ]
-- On EOF reduce production segments -> segment segments 

State 8:
segment -> heading . block [ KW_HEADING EOF ]
-- On elements shift to state 9
-- On block shift to state 49
-- On PAR_SIGCHAR reduce production elements -> 
-- On PAR_ENV reduce production elements -> 
-- On NEWLINE reduce production elements -> 
-- On KW_HEADING reduce production elements -> 
-- On KW_BEGIN_GROUP reduce production elements -> 
-- On HSPACE reduce production elements -> 
-- On EOF reduce production elements -> 

State 9:
block -> elements . emptylines [ KW_HEADING EOF ]
elements -> elements . element [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On group shift to state 10
-- On emptylines shift to state 11
-- On element shift to state 47
-- On atom shift to state 48
-- On PAR_SIGCHAR reduce production emptylines -> 
-- On PAR_ENV reduce production emptylines -> 
-- On NEWLINE reduce production emptylines -> 
-- On KW_HEADING reduce production emptylines -> 
-- On KW_BEGIN_GROUP reduce production emptylines -> 
-- On HSPACE reduce production emptylines -> 
-- On EOF reduce production emptylines -> 

State 10:
element -> group . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production element -> group 
-- On PAR_ENV reduce production element -> group 
-- On NEWLINE reduce production element -> group 
-- On KW_HEADING reduce production element -> group 
-- On KW_BEGIN_GROUP reduce production element -> group 
-- On HSPACE reduce production element -> group 
-- On EOF reduce production element -> group 

State 11:
atom -> emptylines . textpar [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
block -> elements emptylines . [ KW_HEADING EOF ]
emptylines -> emptylines . emptyline [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
group -> emptylines . KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On KW_BEGIN_GROUP shift to state 12
-- On textpar shift to state 19
-- On line_parstart shift to state 20
-- On hspaces shift to state 38
-- On emptyline shift to state 44
-- On PAR_SIGCHAR reduce production hspaces -> 
-- On PAR_ENV reduce production hspaces -> 
-- On NEWLINE reduce production hspaces -> 
-- On KW_HEADING reduce production block -> elements emptylines 
-- On HSPACE reduce production hspaces -> 
-- On EOF reduce production block -> elements emptylines 

State 12:
group -> emptylines KW_BEGIN_GROUP . atoms_and_tailspace KW_END_GROUP [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On atoms_and_tailspace shift to state 13
-- On atoms shift to state 15
-- On PAR_SIGCHAR reduce production atoms -> 
-- On PAR_ENV reduce production atoms -> 
-- On NEWLINE reduce production atoms -> 
-- On KW_FOLD reduce production atoms -> 
-- On KW_END_GROUP reduce production atoms -> 
-- On HSPACE reduce production atoms -> 

State 13:
group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace . KW_END_GROUP [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On KW_END_GROUP shift to state 14

State 14:
group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 
-- On PAR_ENV reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 
-- On NEWLINE reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 
-- On KW_HEADING reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 
-- On KW_BEGIN_GROUP reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 
-- On HSPACE reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 
-- On EOF reduce production group -> emptylines KW_BEGIN_GROUP atoms_and_tailspace KW_END_GROUP 

State 15:
atoms -> atoms . emptylines KW_FOLD atom [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
atoms -> atoms . atom [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
atoms_and_tailspace -> atoms . emptylines [ KW_END_GROUP ]
-- On emptylines shift to state 16
-- On atom shift to state 46
-- On PAR_SIGCHAR reduce production emptylines -> 
-- On PAR_ENV reduce production emptylines -> 
-- On NEWLINE reduce production emptylines -> 
-- On KW_FOLD reduce production emptylines -> 
-- On KW_END_GROUP reduce production emptylines -> 
-- On HSPACE reduce production emptylines -> 

State 16:
atom -> emptylines . textpar [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
atoms -> atoms emptylines . KW_FOLD atom [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
atoms_and_tailspace -> atoms emptylines . [ KW_END_GROUP ]
emptylines -> emptylines . emptyline [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
-- On KW_FOLD shift to state 17
-- On textpar shift to state 19
-- On line_parstart shift to state 20
-- On hspaces shift to state 38
-- On emptyline shift to state 44
-- On PAR_SIGCHAR reduce production hspaces -> 
-- On PAR_ENV reduce production hspaces -> 
-- On NEWLINE reduce production hspaces -> 
-- On KW_END_GROUP reduce production atoms_and_tailspace -> atoms emptylines 
-- On HSPACE reduce production hspaces -> 

State 17:
atoms -> atoms emptylines KW_FOLD . atom [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
-- On emptylines shift to state 18
-- On atom shift to state 45
-- On PAR_SIGCHAR reduce production emptylines -> 
-- On PAR_ENV reduce production emptylines -> 
-- On NEWLINE reduce production emptylines -> 
-- On HSPACE reduce production emptylines -> 

State 18:
atom -> emptylines . textpar [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
emptylines -> emptylines . emptyline [ PAR_SIGCHAR PAR_ENV NEWLINE HSPACE ]
-- On textpar shift to state 19
-- On line_parstart shift to state 20
-- On hspaces shift to state 38
-- On emptyline shift to state 44
-- On PAR_SIGCHAR reduce production hspaces -> 
-- On PAR_ENV reduce production hspaces -> 
-- On NEWLINE reduce production hspaces -> 
-- On HSPACE reduce production hspaces -> 

State 19:
atom -> emptylines textpar . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production atom -> emptylines textpar 
-- On PAR_ENV reduce production atom -> emptylines textpar 
-- On NEWLINE reduce production atom -> emptylines textpar 
-- On KW_HEADING reduce production atom -> emptylines textpar 
-- On KW_FOLD reduce production atom -> emptylines textpar 
-- On KW_END_GROUP reduce production atom -> emptylines textpar 
-- On KW_BEGIN_GROUP reduce production atom -> emptylines textpar 
-- On HSPACE reduce production atom -> emptylines textpar 
-- On EOF reduce production atom -> emptylines textpar 

State 20:
textpar -> line_parstart . textpar_tail [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On textpar_tail shift to state 21
-- On line shift to state 22
-- On hspaces shift to state 24
-- On emptyline shift to state 37
-- On SIGCHAR reduce production hspaces -> 
-- On NEWLINE reduce production hspaces -> 
-- On HSPACE reduce production hspaces -> 
-- On ENV reduce production hspaces -> 

State 21:
textpar -> line_parstart textpar_tail . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production textpar -> line_parstart textpar_tail 
-- On PAR_ENV reduce production textpar -> line_parstart textpar_tail 
-- On NEWLINE reduce production textpar -> line_parstart textpar_tail 
-- On KW_HEADING reduce production textpar -> line_parstart textpar_tail 
-- On KW_FOLD reduce production textpar -> line_parstart textpar_tail 
-- On KW_END_GROUP reduce production textpar -> line_parstart textpar_tail 
-- On KW_BEGIN_GROUP reduce production textpar -> line_parstart textpar_tail 
-- On HSPACE reduce production textpar -> line_parstart textpar_tail 
-- On EOF reduce production textpar -> line_parstart textpar_tail 

State 22:
textpar_tail -> line . textpar_tail [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On textpar_tail shift to state 23
-- On line shift to state 22
-- On hspaces shift to state 24
-- On emptyline shift to state 37
-- On SIGCHAR reduce production hspaces -> 
-- On NEWLINE reduce production hspaces -> 
-- On HSPACE reduce production hspaces -> 
-- On ENV reduce production hspaces -> 

State 23:
textpar_tail -> line textpar_tail . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production textpar_tail -> line textpar_tail 
-- On PAR_ENV reduce production textpar_tail -> line textpar_tail 
-- On NEWLINE reduce production textpar_tail -> line textpar_tail 
-- On KW_HEADING reduce production textpar_tail -> line textpar_tail 
-- On KW_FOLD reduce production textpar_tail -> line textpar_tail 
-- On KW_END_GROUP reduce production textpar_tail -> line textpar_tail 
-- On KW_BEGIN_GROUP reduce production textpar_tail -> line textpar_tail 
-- On HSPACE reduce production textpar_tail -> line textpar_tail 
-- On EOF reduce production textpar_tail -> line textpar_tail 

State 24:
emptyline -> hspaces . newline [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
hspaces -> hspaces . hspace [ SIGCHAR NEWLINE HSPACE ENV ]
line -> hspaces . sigchar chars newline [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR shift to state 25
-- On NEWLINE shift to state 26
-- On HSPACE shift to state 27
-- On ENV shift to state 28
-- On sigchar shift to state 29
-- On newline shift to state 35
-- On hspace shift to state 36

State 25:
sigchar -> SIGCHAR . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production sigchar -> SIGCHAR 
-- On NEWLINE reduce production sigchar -> SIGCHAR 
-- On HSPACE reduce production sigchar -> SIGCHAR 
-- On ENV reduce production sigchar -> SIGCHAR 

State 26:
newline -> NEWLINE . [ SIGCHAR PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ENV ]
-- On SIGCHAR reduce production newline -> NEWLINE 
-- On PAR_SIGCHAR reduce production newline -> NEWLINE 
-- On PAR_ENV reduce production newline -> NEWLINE 
-- On NEWLINE reduce production newline -> NEWLINE 
-- On KW_HEADING reduce production newline -> NEWLINE 
-- On KW_FOLD reduce production newline -> NEWLINE 
-- On KW_END_GROUP reduce production newline -> NEWLINE 
-- On KW_BEGIN_GROUP reduce production newline -> NEWLINE 
-- On HSPACE reduce production newline -> NEWLINE 
-- On EOF reduce production newline -> NEWLINE 
-- On ENV reduce production newline -> NEWLINE 

State 27:
hspace -> HSPACE . [ SIGCHAR PAR_SIGCHAR PAR_ENV NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production hspace -> HSPACE 
-- On PAR_SIGCHAR reduce production hspace -> HSPACE 
-- On PAR_ENV reduce production hspace -> HSPACE 
-- On NEWLINE reduce production hspace -> HSPACE 
-- On HSPACE reduce production hspace -> HSPACE 
-- On ENV reduce production hspace -> HSPACE 

State 28:
sigchar -> ENV . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production sigchar -> ENV 
-- On NEWLINE reduce production sigchar -> ENV 
-- On HSPACE reduce production sigchar -> ENV 
-- On ENV reduce production sigchar -> ENV 

State 29:
line -> hspaces sigchar . chars newline [ SIGCHAR NEWLINE HSPACE ENV ]
-- On chars shift to state 30
-- On SIGCHAR reduce production chars -> 
-- On NEWLINE reduce production chars -> 
-- On HSPACE reduce production chars -> 
-- On ENV reduce production chars -> 

State 30:
chars -> chars . char [ SIGCHAR NEWLINE HSPACE ENV ]
line -> hspaces sigchar chars . newline [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR shift to state 25
-- On NEWLINE shift to state 26
-- On HSPACE shift to state 27
-- On ENV shift to state 28
-- On sigchar shift to state 31
-- On newline shift to state 32
-- On hspace shift to state 33
-- On char shift to state 34

State 31:
char -> sigchar . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production char -> sigchar 
-- On NEWLINE reduce production char -> sigchar 
-- On HSPACE reduce production char -> sigchar 
-- On ENV reduce production char -> sigchar 

State 32:
line -> hspaces sigchar chars newline . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production line -> hspaces sigchar chars newline 
-- On NEWLINE reduce production line -> hspaces sigchar chars newline 
-- On HSPACE reduce production line -> hspaces sigchar chars newline 
-- On ENV reduce production line -> hspaces sigchar chars newline 

State 33:
char -> hspace . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production char -> hspace 
-- On NEWLINE reduce production char -> hspace 
-- On HSPACE reduce production char -> hspace 
-- On ENV reduce production char -> hspace 

State 34:
chars -> chars char . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production chars -> chars char 
-- On NEWLINE reduce production chars -> chars char 
-- On HSPACE reduce production chars -> chars char 
-- On ENV reduce production chars -> chars char 

State 35:
emptyline -> hspaces newline . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production emptyline -> hspaces newline 
-- On PAR_ENV reduce production emptyline -> hspaces newline 
-- On NEWLINE reduce production emptyline -> hspaces newline 
-- On KW_HEADING reduce production emptyline -> hspaces newline 
-- On KW_FOLD reduce production emptyline -> hspaces newline 
-- On KW_END_GROUP reduce production emptyline -> hspaces newline 
-- On KW_BEGIN_GROUP reduce production emptyline -> hspaces newline 
-- On HSPACE reduce production emptyline -> hspaces newline 
-- On EOF reduce production emptyline -> hspaces newline 

State 36:
hspaces -> hspaces hspace . [ SIGCHAR PAR_SIGCHAR PAR_ENV NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production hspaces -> hspaces hspace 
-- On PAR_SIGCHAR reduce production hspaces -> hspaces hspace 
-- On PAR_ENV reduce production hspaces -> hspaces hspace 
-- On NEWLINE reduce production hspaces -> hspaces hspace 
-- On HSPACE reduce production hspaces -> hspaces hspace 
-- On ENV reduce production hspaces -> hspaces hspace 

State 37:
textpar_tail -> emptyline . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production textpar_tail -> emptyline 
-- On PAR_ENV reduce production textpar_tail -> emptyline 
-- On NEWLINE reduce production textpar_tail -> emptyline 
-- On KW_HEADING reduce production textpar_tail -> emptyline 
-- On KW_FOLD reduce production textpar_tail -> emptyline 
-- On KW_END_GROUP reduce production textpar_tail -> emptyline 
-- On KW_BEGIN_GROUP reduce production textpar_tail -> emptyline 
-- On HSPACE reduce production textpar_tail -> emptyline 
-- On EOF reduce production textpar_tail -> emptyline 

State 38:
emptyline -> hspaces . newline [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
hspaces -> hspaces . hspace [ PAR_SIGCHAR PAR_ENV NEWLINE HSPACE ]
line_parstart -> hspaces . parstart chars newline [ SIGCHAR NEWLINE HSPACE ENV ]
-- On PAR_SIGCHAR shift to state 39
-- On PAR_ENV shift to state 40
-- On NEWLINE shift to state 26
-- On HSPACE shift to state 27
-- On parstart shift to state 41
-- On newline shift to state 35
-- On hspace shift to state 36

State 39:
parstart -> PAR_SIGCHAR . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production parstart -> PAR_SIGCHAR 
-- On NEWLINE reduce production parstart -> PAR_SIGCHAR 
-- On HSPACE reduce production parstart -> PAR_SIGCHAR 
-- On ENV reduce production parstart -> PAR_SIGCHAR 

State 40:
parstart -> PAR_ENV . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production parstart -> PAR_ENV 
-- On NEWLINE reduce production parstart -> PAR_ENV 
-- On HSPACE reduce production parstart -> PAR_ENV 
-- On ENV reduce production parstart -> PAR_ENV 

State 41:
line_parstart -> hspaces parstart . chars newline [ SIGCHAR NEWLINE HSPACE ENV ]
-- On chars shift to state 42
-- On SIGCHAR reduce production chars -> 
-- On NEWLINE reduce production chars -> 
-- On HSPACE reduce production chars -> 
-- On ENV reduce production chars -> 

State 42:
chars -> chars . char [ SIGCHAR NEWLINE HSPACE ENV ]
line_parstart -> hspaces parstart chars . newline [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR shift to state 25
-- On NEWLINE shift to state 26
-- On HSPACE shift to state 27
-- On ENV shift to state 28
-- On sigchar shift to state 31
-- On newline shift to state 43
-- On hspace shift to state 33
-- On char shift to state 34

State 43:
line_parstart -> hspaces parstart chars newline . [ SIGCHAR NEWLINE HSPACE ENV ]
-- On SIGCHAR reduce production line_parstart -> hspaces parstart chars newline 
-- On NEWLINE reduce production line_parstart -> hspaces parstart chars newline 
-- On HSPACE reduce production line_parstart -> hspaces parstart chars newline 
-- On ENV reduce production line_parstart -> hspaces parstart chars newline 

State 44:
emptylines -> emptylines emptyline . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_FOLD KW_END_GROUP KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production emptylines -> emptylines emptyline 
-- On PAR_ENV reduce production emptylines -> emptylines emptyline 
-- On NEWLINE reduce production emptylines -> emptylines emptyline 
-- On KW_HEADING reduce production emptylines -> emptylines emptyline 
-- On KW_FOLD reduce production emptylines -> emptylines emptyline 
-- On KW_END_GROUP reduce production emptylines -> emptylines emptyline 
-- On KW_BEGIN_GROUP reduce production emptylines -> emptylines emptyline 
-- On HSPACE reduce production emptylines -> emptylines emptyline 
-- On EOF reduce production emptylines -> emptylines emptyline 

State 45:
atoms -> atoms emptylines KW_FOLD atom . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
-- On PAR_SIGCHAR reduce production atoms -> atoms emptylines KW_FOLD atom 
-- On PAR_ENV reduce production atoms -> atoms emptylines KW_FOLD atom 
-- On NEWLINE reduce production atoms -> atoms emptylines KW_FOLD atom 
-- On KW_FOLD reduce production atoms -> atoms emptylines KW_FOLD atom 
-- On KW_END_GROUP reduce production atoms -> atoms emptylines KW_FOLD atom 
-- On HSPACE reduce production atoms -> atoms emptylines KW_FOLD atom 

State 46:
atoms -> atoms atom . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_FOLD KW_END_GROUP HSPACE ]
-- On PAR_SIGCHAR reduce production atoms -> atoms atom 
-- On PAR_ENV reduce production atoms -> atoms atom 
-- On NEWLINE reduce production atoms -> atoms atom 
-- On KW_FOLD reduce production atoms -> atoms atom 
-- On KW_END_GROUP reduce production atoms -> atoms atom 
-- On HSPACE reduce production atoms -> atoms atom 

State 47:
elements -> elements element . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production elements -> elements element 
-- On PAR_ENV reduce production elements -> elements element 
-- On NEWLINE reduce production elements -> elements element 
-- On KW_HEADING reduce production elements -> elements element 
-- On KW_BEGIN_GROUP reduce production elements -> elements element 
-- On HSPACE reduce production elements -> elements element 
-- On EOF reduce production elements -> elements element 

State 48:
element -> atom . [ PAR_SIGCHAR PAR_ENV NEWLINE KW_HEADING KW_BEGIN_GROUP HSPACE EOF ]
-- On PAR_SIGCHAR reduce production element -> atom 
-- On PAR_ENV reduce production element -> atom 
-- On NEWLINE reduce production element -> atom 
-- On KW_HEADING reduce production element -> atom 
-- On KW_BEGIN_GROUP reduce production element -> atom 
-- On HSPACE reduce production element -> atom 
-- On EOF reduce production element -> atom 

State 49:
segment -> heading block . [ KW_HEADING EOF ]
-- On KW_HEADING reduce production segment -> heading block 
-- On EOF reduce production segment -> heading block 

State 50:
emptyline -> hspaces . newline [ NEWLINE KW_HEADING HSPACE EOF ]
hspaces -> hspaces . hspace [ NEWLINE HSPACE ]
-- On NEWLINE shift to state 26
-- On HSPACE shift to state 27
-- On newline shift to state 35
-- On hspace shift to state 36

