
\documentclass{course}
\title{Parallel and Sequential Algorithms (Fall 2019)}
\coursenumber{15210}
\picture{/210/course/air-pavilion.jpg}
\providesbook{S18}
\provideschapter{21}
\providessection{1}
\providesunit{1}
\providesassignment{1}
\semester{Spring 2018}
\website{http://www.cs.cmu.edu/~15210}
15-210 aims to teach methods for designing, analyzing, and programming
sequential and parallel algorithms and data structures. The emphasis
is on teaching fundamental concepts applicable across a wide variety
of problem domains, and transferable across a reasonably broad set of
programming languages and computer architectures. This course also
includes a significant programming component in which students will
program concrete examples from domains such as engineering, scientific
computing, graphics, data mining, and information retrieval (web
search).

Unlike a traditional introduction to algorithms and data structures,
this course puts an emphasis on parallel thinking â€” i.e., thinking
about how algorithms can do multiple things at once instead of one at
a time. The course follows up on material learned in 15-122 and 15-150
but goes into significantly more depth on algorithmic issues.
\begin{book}
\title{Algorithm Design: Parallel and Sequential (Fall 2019)}
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}
\authors{Umut A. Acar and Guy Blelloch}

\begin{chapter}[Example Chapter: Binary Search Trees]
\label{ch:bsts}
\parent{...NOT.PROVIDED.PARENTS...}

\picture{/210/bsts/abstract-tree.jpg}
...NOT.PROVIDED.INTRO...
\begin{section}[Motivation]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

Searching is one of the most important operations in computer science.
Of the many search data structures that have been designed and are
used in practice, search trees, more specifically balanced binary
search trees, occupy a coveted place because of their broad
applicability to many different sorts of problems.  For example, in
this book, we rely on binary search trees to implement set and table
(dictionary) abstract data types
%(\chref{sets-tables}),
which are then used in the
implementation of many algorithms, including for example graph
algorithms.
\begin{unit}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

If we are interested in searching a static or unchanging collection of
elements, then we can use a simpler data structure such as sequences.
%
For example, we can use a sequence with the array-based cost
specification to implement an efficient search function by
representing the collection as a sorted sequence and by using binary
search.  
%
Such an implementation would yield a logarithmic-work search
operation.
%
If, however, we want to support dynamic collections, where for
example, we insert new elements and delete existing elements,
sequences would require linear work.
% 
Binary search trees, or~\defn{BSTs} for short, make it possible to
compute with dynamic collections by using insertions, deletions, as
well as searches all in logarithmic number of tree operations.
\end{gram}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

In the traditional treatment of algorithms, which focuses on
sequential algorithms, binary search trees revolve around three
operations: insertion, deletion, and search.
%
While these operations are important, they are not sufficient for
parallelism, since they perform a single update at a time.
% 
We therefore consider aggregate update operations, such as union and
difference, which can be used to insert and delete (respectively) many
elements atonce.
\end{gram}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The rest of this chapter is organized as follows.  We first define
binary search trees
%(\secref{bst::prelim})
and present an ADT for them.
%(\secref{bst::adt}). 
%
We then present a parametric implementation of the ADT
%(\secref{bst::parametric})
by using only two operations, $\cd{split}$
and $\cd{join}$, which respectively split a tree at a given key and
join two trees.
%
%In \secref{bst::cost},
Next, we present a cost specification based on the
parametric implementation, which achieves strong bounds as long as the
$\cd{split}$ and $\cd{join}$ operations have logarithmic work and
span.
%
As a result, we are able to reduce the problem of implementing the BST
ADT to the problem of implementing just the functions $\cd{split}$
and $\cd{join}$.  
%
We finish the chapter by presenting a specific instance of the
parametric implementation using Treaps.
%(\secref{bst::treaps}).
%
Other possible implementation techniques are also described.
%(\secref{bst::bsts-review})
\end{gram}
\end{unit}
\end{section}

\begin{section}[Preliminaries]
\label{sec:bst::prelim}
\parent{...NOT.PROVIDED.PARENTS...}

...NOT.PROVIDED.INTRO...
\begin{unit}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

We start with some basic definitions and terminology involving rooted
and binary search trees.  Recall first that a rooted tree is a tree
with a distinguished root node.
%(\defref{prelim::rootedtree}). 
%
A~\defn{full binary tree} is a rooted tree, where each node is either
a~\defn{leaf}, which has no children, or an~\defn{internal node},
which have a left and a right child.
%(\defref{bst::binarytree}).
%
\end{gram}

\begin{definition}[Full Binary Tree]
\label{def:bst::binarytree}
\parent{...NOT.PROVIDED.PARENTS...}

A~\defn{full binary tree} is an ordered rooted tree in which every
internal node has exactly two children: the first or the~\defn{left
  child} and the second or the~\defn{right child}.  
%
The~\defn{left subtree} of a node is the subtree rooted at the left
child, and the~\defn{right subtree} the one rooted at the right child.
\end{definition}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

A binary search tree is a full binary tree, where each internal node
$u$ has a unique key~$k$ such that each node in its left subtree has a
key less than $k$ and each node in its right subtree has a key greater
that $x$.  
%
\end{gram}

\begin{group}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{definition}[Binary Search Tree (BST)]
\label{def:bst::bst}
\parent{...NOT.PROVIDED.PARENTS...}

A~\defn{binary search tree} (BST) over a totally ordered set $S$ is a
full binary tree that satisfies the following conditions.
\begin{enumerate}
 \item There is a one-to-one mapping $k(v)$ from internal tree nodes to elements in $S$.
 \item for every $u$ in the left subtree of $v$, $k(u) < k(v)$
 \item for every $u$ in the right subtree of $v$, $k(u) > k(v)$
\end{enumerate}
%
In the definition, conditions 2 and 3 are referred to as the~\defn{BST
  property}.  We often refer to the elements of $S$ in a BST as keys,
and use $\dom{T}$ to indicate the domain (keys) in a BST $T$.
The~\defn{size} of a BST is the number of keys in the tree,
i.e. $|S|$.


% A BST can equivalently be defined recursively as:
% \[
% \cd{BST}(S) = \left\{\begin{array}{ll}
% \cd{Leaf} & S = \emptyset\\
% \cd{iNode}(\cd{BST}(S_L), k, \cd{BST}(S_R)) & 
% \underbrace{(S = S_L \cup \cset{k} \cup S_R)}_{\mbox{one to one (inclusion)}} \wedge \underbrace{(S_L < k < S_R)}_{\mbox{BST property}}
% \end{array}\right.
% \]
\end{definition}

\begin{example}[...NOT.PROVIDED.TITLE...]
\label{ex:bst}
\parent{...NOT.PROVIDED.PARENTS...}

An example binary search tree over the set of natural numbers
$\{1,3,4,5,6,7,8,9\}$ is shown below.

\begin{tabular}{ccc}
\vspace*{0in}
\begin{minipage}[t]{2.5in}
\vspace*{0in}
\includegraphics[width=2.5in]{/media/210/bsts/bst2.jpg}
\end{minipage}
%
& \quad\quad\quad &
%
\vspace*{0in}
\begin{minipage}[t]{2.5in}
\vspace*{0in}
\includegraphics[width=1.8in]{/media/210/bsts/bst3.jpg}
\end{minipage}
\end{tabular}
On the left the $L$ and $R$ indicate the left (first) and right
(second) child, respectively.  All internal nodes (white) have a key
associated with them while the leaves (black) are empty.  The keys
satisfy the BST property---for every node, the keys in the left
subtree are less, and the ones in the right subtree are greater. 


\smallskip 

In the illustration on the left, the edges are oriented away from the
root. They could have also been oriented towards the root.
%
When illustrating binary search trees, we usually replace the directed
arcs with undirected edges, leaving the orientation to be implicit.
%
We also draw the left and right subtrees of a node on its left and
right respectively.
%
Following this convention, we can draw the tree on the left above as
shown an the right.
%
We use this convention in future figures.
\end{example}
\end{group}
\end{unit}
\end{section}

\begin{section}[The BST Abstract Data Type]
\label{sec:bst::adt}
\parent{...NOT.PROVIDED.PARENTS...}

...NOT.PROVIDED.INTRO...
\begin{unit}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The Abstract Data Type specification below describes an ADT for BSTs
parametrized by a totally ordered key set. We briefly describe this
ADT and present some examples. As we shall see, the BST ADT can be
implemented in many ways.  In order to present concrete examples, we
assume an implementation but do not specify it.
\end{gram}

\begin{datatype}[Binary Search Tree (BST)]
\label{adt:bst::adt}
\parent{...NOT.PROVIDED.PARENTS...}

For a universe of totally ordered keys $\kkk$, the BST ADT
consists of a type $\bstt$ representing a power set of keys and the
functions whose types are specified as follows. 

\[
\begin{array}{lcl}
\texttt{empty} & : &\bstt
\\
%
\cd{singleton} & : & \kkk \ra \bstt
\\
%
\cd{find}
& : & \bstt \ra \kkk \ra \bbb
\\
%
\cd{delete}
& : & \bstt \ra \kkk \ra  \bstt
\\
\cd{insert}
& : & \bstt \ra \kkk \ra  \bstt
\\
%
\cd{intersection}
& : & \bstt \ra \bstt \ra  \bstt
\\
%
\cd{difference}
& : & \bstt \ra \bstt \ra  \bstt
\\
%
\cd{union}
& : & \bstt \ra \bstt \ra  \bstt
\\
%
\cd{split}
& : & \bstt \ra \kkk \ra (\bstt \times \bbb \times \bstt)
\\
\cd{join}
& : & \bstt \ra \bstt \ra \bstt 
\end{array}
\]
\end{datatype}

\begin{group}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{gram}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The ADT supports two constructors: $\cd{empty}$ creates an empty BST
  and $\cd{singleton}$ creates a BST with a single key.
%

The function $\cd{find}$ searches for a given key and returns a
boolean indicating success.

The functions $\cd{insert}$ and $\cd{delete}$ insert and delete a
given key into or from the BST.
\end{gram}

\begin{example}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

Searching in BSTs illustrated.

\begin{itemize}
\item 
Searching for  $5$  in the input tree returns $\cd{true}.$

$\cd{find}$
$\leftparen{2cm}$
\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}
$\rightparen{2cm}$
~~$\cd{5}$
$~=~$
$\cd{true}$

\item 
Searching for  $6$  in the input tree returns $\cd{false}.$
%

$\cd{find}$
$\leftparen{2cm}$
\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}
$\rightparen{2cm}$
~~$\cd{6}$
$~=~$ 
$\cd{false}$

\end{itemize}
\end{example}

\begin{example}[Insertion]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

Inserting the key $6$  into the input tree returns a new tree including $6$.
%

$\cd{insert}$
$\leftparen{2cm}$
\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}
$\rightparen{2cm}$
~~$\cd{6}$
=
\includegraphics[width=3cm]{/media/210/bsts/bst5.jpg}
\end{example}

\begin{example}[Deletion]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

Deleting the key  $6$ from the input tree returns a tree without it.
%

$\cd{delete}$
$\leftparen{2cm}$
\includegraphics[width=3cm]{/media/210/bsts/bst5.jpg}
$\rightparen{2cm}$
~~$\cd{6}$
= 
\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}
\end{example}
\end{group}

\begin{gram}[Union]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The function $\cd{union}$ takes two BSTs and returns a BST that
contains all the keys in them; $\cd{union}$ is an aggregate insert
operation.
% 
The function $\cd{intersection}$ takes two BSTs and returns a BST
that contains the keys common in both.
% 
The function $\cd{difference}$ takes two BSTs $t_1$ and $t_2$ and returns
a BST that contains the keys in $t_1$ that are not in $t_2$;
$\cd{difference}$ is an aggregate delete operation.
\end{gram}

\begin{group}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{gram}[Split]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The function $\cd{split}$ takes a tree $t$ and a key $k$ and
splits $t$ into two trees: one consisting of all the keys of $t$ less
than $k$, and another consisting of all the keys of $t$ greater than
$k$.  
%
It also returns a Boolean value indicating whether $k$ appears in $t$.
%
The exact structure of the trees returned by $\cd{split}$ can differ
from one implementation to another: the specification only requires
that the resulting trees to be valid BSTs and that they contain the
keys less than $k$ and greater than $k$, leaving their structure
otherwise unspecified.
\end{gram}

\begin{example}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The function $\cd{split}$ illustrated.

\begin{itemize}
\item 
Splitting the input tree at $6$ yields two trees, consisting of the
keys less that $6$ and those greater that $6$, indicating also that
$6$ is not in the input tree. 

$\cd{split}$
$\leftparen{2cm}$
\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}
$\rightparen{2cm}$
~~$\cd{6}$
$~~=~~$
$\leftparen{1.5cm}$
\includegraphics[width=1cm]{/media/210/bsts/bst4a.jpg}~~,
$\cd{False}$~,~~
\includegraphics[width=2cm]{/media/210/bsts/bst4b.jpg}
$\rightparen{1.5cm}$

\item 
Splitting the input tree at $5$ yields two trees, consisting of the
keys less than $5$ and those greater than $5$, indicating also that
$5$ is found in the input tree. 

$\cd{split}$
$\leftparen{2cm}$
\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}
$\rightparen{2cm}$
~~$\cd{5}$
%
$~~=~~$
%
$\leftparen{2cm}$
{\includegraphics[width=7mm]{/media/210/bsts/bst4c.jpg}}~~,
~$\cd{True}$~,~~
{\includegraphics[width=2cm]{/media/210/bsts/bst4b.jpg}}
$\rightparen{2cm}$
\end{itemize}
\end{example}
\end{group}

\begin{group}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

\begin{gram}[Join]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The function $\cd{join}$ takes two trees $t_1$ and $t_2$
such that all the keys in $t_1$ are less than the keys in $t_2$.  The
function returns a tree that contains all the keys in $t_1$ and $t_2$.
%
The exact structure of the tree returned by $\cd{join}$ can differ
from one implementation to another: the specification only requires
that the resulting tree is a valid BST and that it contains all the
keys in the trees joined.
\end{gram}

\begin{example}[...NOT.PROVIDED.TITLE...]
\label{...NOT.PROVIDED.LABEL...}
\parent{...NOT.PROVIDED.PARENTS...}

The function $\cd{join}$ illustrated.

$\cd{join}$
$\leftparen{2cm}$
\includegraphics[width=1.0cm]{/media/210/bsts/bst4a.jpg}
$\rightparen{2cm}$
%
$\leftparen{2cm}$
{\includegraphics[width=3cm]{/media/210/bsts/bst6.jpg}}
$\rightparen{2cm}$
%
$~~=~~$
%
{\includegraphics[width=3cm]{/media/210/bsts/bst4.jpg}}
\end{example}
\end{group}
\end{unit}
\end{section}
\end{chapter}

\end{book}
