\documentclass{course}
\title{Parallel and Sequential Algorithms (Fall 2018)}

% Course number must be unique in the database
\coursenumber{15210}

\semester{Spring 2018}
\picture{/210/course/air-pavilion.jpg}
\website{http://www.cs.cmu.edu/~15210}

% Provides book
% This must be provided
% The name should be relative to course number.
\providesbook{S18}

% Start counting chapters from 
% This is optional. Will start counting at 1.
\provideschapter{21}

15-210 aims to teach methods for designing, analyzing, and programming
sequential and parallel algorithms and data structures. The emphasis
is on teaching fundamental concepts applicable across a wide variety
of problem domains, and transferable across a reasonably broad set of
programming languages and computer architectures. This course also
includes a significant programming component in which students will
program concrete examples from domains such as engineering, scientific
computing, graphics, data mining, and information retrieval (web
search).

Unlike a traditional introduction to algorithms and data structures,
this course puts an emphasis on parallel thinking â€” i.e., thinking
about how algorithms can do multiple things at once instead of one at
a time. The course follows up on material learned in 15-122 and 15-150
but goes into significantly more depth on algorithmic issues. 


\begin{book}
\title{Algorithm Design: Parallel and Sequential (Fall 2019)}
\authors{Umut A. Acar and Guy Blelloch}

\begin{chapter}[Example Chapter: Binary Search Trees]
\label{ch:bsts}
\picture{/210/bsts/abstract-tree.jpg}
%% UPDATE LOG (Umut)
%%%% Umut: Updates in Fall 2016
%% consistency in notation
%% simplified adt
%%
%%%% Umut: Updates from 2015 to 2016
%%   Feb 2016: Bunch of corrections.
%%             Augmentation part (- reduced values) updated.
%%
%%%% Umut: Updates from 2014 to 2015 (body-2014.tex)
%% (balancing) scheme --> data structure
%% (I worry that ``scheme'' can piss people off.)
%%
%% skip trees --> skip lists.
%%
%% Define full ADT.
%% Major edit on the rest of the section
%% saving body-2014.tex in directory for recovery of 
%% material.
%% The section at the end also contains
%% some (probably all of the left unused material).
%%
%% A summary of edits:
%% o defined ADT also mathematically, all functions included
%% o simplified join interface: considering only two trees.
%%   this was a significant change that affected a lot of code and 
%%   discussion.  i probably missed some.
%% o repositioned review of prior work
%% o deleted unbalanced version
%% o Using the word ``parametric'' implementation to refer to a functor
%% o Rewrote the parametric implementation section
%% o added ``setdifference'' function diff everywhere
%% o Changed treap intro to talk about random insertions.
%% o Rewrote treap section, gave full code based on parametric.
%% o Separate cost spec section, justified by parametric analysis.
%% o Rewrote augmentation section
%% o Worked out a direct proof of the union bound.
%% TODO: Flesh out the join bound and the log-span implementation.


\begin{section}[Motivation]

%% \begin{teachask}
%% Can't we use sequences for searching? 
%% \end{teachask}

Searching is one of the most important operations in computer science.
Of the many search data structures that have been designed and are
used in practice, search trees, more specifically balanced binary
search trees, occupy a coveted place because of their broad
applicability to many different sorts of problems.  For example, in
this book, we rely on binary search trees to implement set and table
(dictionary) abstract data types
(\chref{sets-tables}),
which are then used in the
implementation of many algorithms, including for example graph
algorithms.

 \begin{subsection}

\begin{gram}
If we are interested in searching a static or unchanging collection of
elements, then we can use a simpler data structure such as sequences.
%
For example, we can use a sequence with the array-based cost
specification to implement an efficient search function by
representing the collection as a sorted sequence and by using binary
search.  
%
Such an implementation would yield a logarithmic-work search
operation.
%
If, however, we want to support dynamic collections, where for
example, we insert new elements and delete existing elements,
sequences would require linear work.
% 
Binary search trees, or~\defn{BSTs} for short, make it possible to
compute with dynamic collections by using insertions, deletions, as
well as searches all in logarithmic number of tree operations.
\end{gram}

\begin{gram}
In the traditional treatment of algorithms, which focuses on
sequential algorithms, binary search trees revolve around three
operations: insertion, deletion, and search.
%
While these operations are important, they are not sufficient for
parallelism, since they perform a single update at a time.
% 
We therefore consider aggregate update operations, such as union and
difference, which can be used to insert and delete (respectively) many
elements atonce.
\end{gram}

\begin{gram}
The rest of this chapter is organized as follows.  We first define
binary search trees
(\secref{bst::prelim})
and present an ADT for them.
(\secref{bst::adt}). 
%
We then present a parametric implementation of the ADT
(\secref{bst::parametric})
by using only two operations, $\cd{split}$
and $\cd{join}$, which respectively split a tree at a given key and
join two trees.
%
In \secref{bst::cost},
we present a cost specification based on the
parametric implementation, which achieves strong bounds as long as the
$\cd{split}$ and $\cd{join}$ operations have logarithmic work and
span.
%
As a result, we are able to reduce the problem of implementing the BST
ADT to the problem of implementing just the functions $\cd{split}$
and $\cd{join}$.  
%
We finish the chapter by presenting a specific instance of the
parametric implementation using Treaps (\secref{bst::treaps}).
%
Other possible implementation techniques are also described
(\secref{bst::bsts-review})
\end{gram}
\end{subsection}
\end{section}


\end{chapter}
\end{book}
