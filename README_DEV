# Real world ocaml updated version 
https://dev.realworldocaml.org/records.html

# Usage

## tex2tex
$ make
  This will generate tex2tex.native
  Run 
  $ tex2tex.native tex/star.tex s.tex

  This will parse tex/star.tex and write the parsed document into s.tex
  Run now 
  $ diff s.tex tex/star.tex
  And there should be no difference, because the parser is idempotent.

## tex2xml
$ make tex2xml.native
  This will generate tex2xml.native
  Run 
  $ tex2xml.native tex/star.tex s.xml

  This will parse tex/star.tex and generate an incomplete xml
  Completing this translation is currently what I am working on.




##
## OCAML

To load a module into the ocaml REPL use #load, e.g.,
# #load "Str.cma";;
# Str.split (Str.regexp (",[ ]*"))  "x = y y = z";;

######################################################################
## Pre-OCAML README, September 2018

# IMPORTANT: 
1) the module pervasives/ must match that inside the diderot
2) the module mlx should containt syntax.py and this should be identical to that from diderot.

This is how MeTaL and Diderot communicate.
  

# Translation to MLX

  In the past, it used to be that strictification and elaboration was done at the DEX level.  We now do these at the MLX level because XML tools make these operations relatively straightforward to implement.  Theferefore dex2mlx does a relatively straightforward translation of DEX to MLX.
  

# Create a standalone executable
pip install pyinstaller
pyinstaller --onefile --windowed file.py

# CAML Version of MTL

  * tex/ contains a block-parser for latex written in ocaml
  * xml/ contains code for Diderot XML written in ocaml
  

# Note on Python 3

  I (Umut) was able to port MeTaL to python3 without much difficulty.
  The code for ported dex/ directory is in dex3
  See README3.

  I think we are not going to switch to python3 at the moment.  So I
  am not going to maintain this codebase.

