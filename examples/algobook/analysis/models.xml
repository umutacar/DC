<?xml version="1.0" encoding="UTF-8"?>
<segment name='chapter'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
Cost Models
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Cost Models
]]>
</field> <!-- title_src -->
<field name='label'>
ch:analysis::models
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:prmbl:analysis::models::algorithmic
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='preamble'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
prmbl:analysis::models::algorithmic
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Any algorithmic analysis must assume a  <strong><em>cost model</em></strong>  that defines the resource costs required by a computation. There are two broadly accepted ways of defining cost models: machine-based and language-based cost models.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Any algorithmic analysis must assume a~\defn{cost model}~that defines
the resource costs required by a computation.
There are two broadly accepted ways of defining cost models:
machine-based and language-based cost models.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- preamble -->

</segment> <!-- cluster -->


<segment name='section'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
Machine-Based Cost Models
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Machine-Based Cost Models
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::machine-based-cost-models
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::machine-based-cost-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Machine-Based Cost Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Machine-Based Cost Model
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::machine-based-cost-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>A  <strong><em>machine-based (cost) model</em></strong>  takes a machine model and defines the cost of each instruction that can be executed by the machine—often unit cost per instruction. When using a machine-based model for analyzing an algorithm, we translate the algorithm so that it can be executed on the machine and then analyze the cost of the machine instructions used by the algorithm.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
A~\defn{machine-based (cost) model}~takes a machine model and defines the
cost of each instruction that can be executed by the machine---often
unit cost per instruction.
When using a machine-based model for analyzing an algorithm, we
translate the algorithm so that it can be executed on the machine and
then analyze the cost of the machine instructions used by the algorithm.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:rmrk:analysis::models::machine-based
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='remark'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
rmrk:analysis::models::machine-based
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Machine-based models are suitable for deriving asymptotic bounds (i.e., using big-O, big-Theta and big-Omega) but not for predicting exact runtimes. The reason for this is that on a real machine not all instructions take the same time, and furthermore not all machines have the same instructions.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Machine-based models are suitable for deriving asymptotic bounds
(i.e., using big-O, big-Theta and big-Omega) but not for predicting
exact runtimes.   The reason for this is that on a real machine not all
instructions take the same time, and furthermore not all machines have
the same instructions.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- remark -->

</segment> <!-- cluster -->


<segment name='subsection'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
RAM Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
RAM Model
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::ram-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::classic
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::classic
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>The classic machine-based model for analyzing sequential algorithms is the  <strong><em>Random Access Machine</em></strong> or  <strong><em>RAM</em></strong> . In this model, a machine consists of a single processor that can access unbounded memory; the memory is indexed by the natural numbers. The processor interprets sequences of machine instructions (code) that are stored in the memory. Instructions include basic arithmetic and logical operations (e.g. <span class="math inline">\(\texttt{+}\)</span>, <span class="math inline">\(\texttt{-}\)</span>, <span class="math inline">\(\texttt{*}\)</span>, and, or, <span class="math inline">\(\texttt{not}\)</span>), reads from and writes to arbitrary memory locations, and conditional and unconditional jumps to other locations in the code. Each instruction takes unit time to execute, including those that access memory. The execution-time, or simply  <strong><em>time</em></strong> of a computation is measured in terms of the number of instructions executed by the machine. Because the model is sequential (there is only one processor) time and work are the same.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
The classic machine-based model for analyzing sequential algorithms is
the~\defn{Random Access Machine} or~\defn{RAM}.
In this model, a machine consists of a single processor that can
access unbounded memory; the memory is indexed by the natural numbers.
The processor interprets sequences of machine instructions (code) that
are stored in the memory.  Instructions include basic arithmetic and
logical operations (e.g. $\cd{+}$, $\cd{-}$, $\cd{*}$, and, or,
$\cd{not}$), reads from and writes to arbitrary memory locations, and
conditional and unconditional jumps to other locations in the code.
Each instruction takes unit time to execute, including those that
access memory.
The execution-time, or simply~\defn{time} of a computation is measured
in terms of the number of instructions executed by the machine.
Because the model is sequential (there is only one processor) time
and work are the same.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::critique-of-the-ram-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Critique of the RAM Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Critique of the RAM Model
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::critique-of-the-ram-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Most research and development of sequential algorithms has used the RAM model for analyzing time and space costs. One reason for the RAM model’s success is that it is relatively easy to reason about the costs because algorithmic pseudo code can usually be translated to the model. Similarly, code in low-level sequential languages such as C can also be translated (compiled) to the RAM Model relatively easily. When using higher level languages, the translation from the algorithm to machine instructions becomes more complex and we find ourselves making strong, possibly unrealistic assumptions about costs, even sometimes without being aware of the assumptions.</p>
<p>More broadly, the RAM model becomes difficult to justify in modern languages. For example, in object- oriented languages certain operations may require substantially more time than others. Likewise, features of modern programming languages such as automatic memory management can be difficult to account for in analysis. Functional features such as higher-order functions are even more difficult to reason about in the RAM model because their behavior depends on other functions that are used as arguments. Such functional features, which are the mainstay of “advanced” languages such as the ML family and Haskell, are now being adopted by more mainstream languages such as Python, Scala, and even for more primitive (closer to the machine) languages such as C++. All in all, it requires significant expertise to understand how an algorithm implemented in modern languages today may be translated to the RAM model.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Most research and development of sequential algorithms has used the RAM model for
analyzing time and space costs.
One reason for the RAM model's success is that it is relatively easy
to reason about the costs because algorithmic pseudo code can usually
be translated to the model.
Similarly, code in low-level sequential languages such as C can also
be translated (compiled) to the RAM Model relatively easily.
When using higher level languages, the translation from the algorithm to
machine instructions becomes more complex and we find ourselves making
strong, possibly unrealistic assumptions about costs, even sometimes
without being aware of the assumptions.  

More broadly, the RAM model becomes difficult to justify in modern
languages.
For example, in object- oriented languages certain operations may
require substantially more time than others.
Likewise, features of modern programming languages such as automatic
memory management can be difficult to account for in
analysis.
Functional features such as higher-order functions are even more
difficult to reason about in the RAM model because their behavior
depends on other functions that are used as arguments.
Such functional features, which are the mainstay of ``advanced''
languages such as the ML family and Haskell, are now being adopted by
more mainstream languages such as Python, Scala, and even for more primitive (closer to the machine)
languages such as C++.
All in all, it requires significant expertise to understand how an
algorithm implemented in modern languages today may be translated to the
RAM model.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:rmrk:analysis::models::aspect
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='remark'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
rmrk:analysis::models::aspect
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>One aspect of the RAM model is the assumption that accessing all memory locations has the same uniform cost. On real machines this is not the case. In fact, there can be a factor of 100 or more difference between the time for accessing different locations in memory. For example, all machines today have caches and accessing the first-level cache is usually two orders of magnitude faster than accessting main memory.</p>
<p>Various extensions to the RAM model have been developed to account for this non-uniform cost of memory access. One variant assumes that the cost for accessing the <span class="math inline">\(i^{th}\)</span> memory location is <span class="math inline">\(f(i)\)</span> for some function <span class="math inline">\(f\)</span>, e.g. <span class="math inline">\(f(i) = \log(i)\)</span>. Fortunately, however, most algorithms that are good in these more detailed models are also good in the RAM model. Therefore analyzing algorithms in the simpler RAM model is often a reasonable approximation to analyzing in the more refined models. Hence the RAM has served quite well despite not fully accounting for non-uniform memory costs.</p>
<p>The model we use in this book also does not account for non-uniform memory costs, but as with the RAM the model can be refined to account for it.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
One aspect of the RAM model is the assumption that
accessing all memory locations has the same uniform cost.  On real
machines this is not the case.  In fact, there can be a factor of 100
or more
difference between the time for accessing different locations in
memory.  For example, all machines today have caches and accessing the
first-level cache is usually two orders of magnitude faster than
accessting main memory.

Various extensions to the RAM model have been developed to account for
this non-uniform cost of memory access.  One variant assumes that the
cost for accessing the $i^{th}$ memory location is $f(i)$ for some
function $f$, e.g. $f(i) = \log(i)$.  
Fortunately, however, most algorithms that are good in these more
detailed models are also good in the RAM model.
Therefore analyzing algorithms in the simpler RAM model is often a
reasonable approximation to analyzing in the more refined models.
Hence the RAM has served quite well despite not fully accounting for
non-uniform memory costs.

The model we use in this book also does not account for non-uniform
memory costs, but as with the RAM the model can be refined to account
for it.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- remark -->

</segment> <!-- cluster -->


</segment> <!-- subsection -->

<segment name='subsection'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
PRAM: Parallel Random Access Machine
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
PRAM: Parallel Random Access Machine
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::pram-parallel-random-access-machine
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>The RAM model is sequential but can be extended to use multiple processors which share the same memory. The extended model is called the Parallel Random Access Machine.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
The RAM model is sequential but can be extended to use multiple processors
which share the same memory.  The extended model is called the
Parallel Random Access Machine.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::pram-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
PRAM Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
PRAM Model
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::pram-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>A <strong><em>Parallel Random Access Machine</em></strong> , or <strong><em>PRAM</em></strong> , consist of <span class="math inline">\(p\)</span> sequential random access machines (RAMs) sharing the same memory. The number of processors, <span class="math inline">\(p\)</span>, is a parameter of the machine, and each processor has a unique index in <span class="math inline">\(\{0, \dots, p-1\}\)</span>, called the  <strong><em>processor id</em></strong> . Processors in the PRAM operate under the control of a common clock and execute one instruction at each time step. The PRAM model is most usually used as a <span><em>synchronous</em></span> model, where all processors execute the same algorithm and operate on the same data structures. Because they have distinct ids, however, different processors can do different computations.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
A \defn{Parallel Random Access Machine}, or \defn{PRAM}, 
consist of $p$ sequential random access machines
(RAMs) sharing  the same memory.
The number of processors, $p$, is a parameter of the machine,
and each processor has a unique index in $\{0, \dots, p-1\}$,
called the~\defn{processor id}.
Processors in the PRAM operate under the control of a common
clock and execute one instruction at each time step.
The PRAM model is most usually used as a {\em synchronous} model,
where all processors execute the same algorithm and operate on the same
data structures.
Because they have distinct ids, however, different processors can do
different computations.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:ex:analysis::models::pram-array-add
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
ex:analysis::models::pram-array-add
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p> We can specify a PRAM algorithm for adding one to each element of an integer array with <span class="math inline">\(p\)</span> elements as shown below. In the algorithm, each processor updates certain elements of the array as determined by its processor id, <span class="math inline">\(id\)</span>.</p>
<p><span class="math display">\[\begin{array}{l}  
\texttt{(* Input: integer array A. *)}  
\\  
\mathit{arrayAdd} =  A[id] \leftarrow A[id]+1  
\end{array}\]</span> If the array is larger than <span class="math inline">\(p\)</span>, then the algorithm would have to divide the array up and into parts, each of which is updated by one processor.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
\label{ex:analysis::models::pram-array-add}
We can specify a PRAM algorithm for adding one to each element of an
integer array with $p$ elements as shown below.  In the algorithm,
each processor updates certain elements of the array as determined by
its processor id, $id$.

\[
\begin{array}{l}
\cd{(* Input: integer array A. *)}
\\
\cdvar{arrayAdd} =  A[id] \la A[id]+1
\end{array}
\]
If the array is larger than $p$, then the algorithm would have to
divide the array up and into parts, each of which is updated by one
processor.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::simd-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
SIMD Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
SIMD Model
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::simd-model
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Because in the PRAM all processors execute the same algorithm, this typically leads to computations where each processor executes the same instruction but possibly on different data. PRAM algorithms therefore typically fit into  <strong><em>single instruction multiple data</em></strong> , or <strong><em>SIMD</em></strong> , programming model. Example <a href="#ex:analysis::models::pram-array-add" data-reference-type="ref" data-reference="ex:analysis::models::pram-array-add">[ex:analysis::models::pram-array-add]</a> shows an example SIMD program.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Because in the PRAM all processors execute the same algorithm, this
typically leads to computations where each processor executes the same
instruction but possibly on different data.   PRAM algorithms
therefore typically fit into~\defn{single instruction multiple
  data}, or \defn{SIMD}, programming model.
\exref{analysis::models::pram-array-add} shows an example SIMD program.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::critique-of-pram
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Critique of PRAM
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Critique of PRAM
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::critique-of-pram
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Since the model is synchronous, and it requires the algorithm designer to map or schedule computation to a fixed number of processors, the PRAM model can be awkward to work with. Adding a value to each element of an array is easy if the array length is equal to the number of processors, but messier if not, which is typically the case. For computations with nested parallelism, such as divide-and-conquer algorithms, the mapping becomes much more complicated.</p>
<p>We therefore don’t use the PRAM model in this book. Most of the algorithms presented in this book, however, also work with the PRAM (with more complicated analysis), and many of them were originally developed using the PRAM model.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Since the model is synchronous, and it requires the algorithm designer to map
or schedule computation to a fixed number of processors, the PRAM model can be awkward
to work with.
Adding a value to each element of an array is easy if the array
length is equal to the number of processors, but messier if not, which is
typically the case.
For computations with nested parallelism, such as divide-and-conquer
algorithms, the mapping becomes much more complicated.

We therefore don't use the PRAM model in this book.
Most of the algorithms presented in this book, however, also work with the
PRAM (with more complicated analysis), and many of them were
originally developed using the PRAM model.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->


</segment> <!-- subsection -->

</segment> <!-- section -->

<segment name='section'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
Language Based Models
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Language Based Models
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::language
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::language-based-cost-models
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Language-Based Cost-Models
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Language-Based Cost-Models
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::language-based-cost-models
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>A  <strong><em>language-based model</em></strong>  takes a language as the starting point and defines cost as a function mapping the expressions of the language to their cost. Such a cost function is usually defined as a recursive function over the different forms of expressions in the language. To analyze an algorithm by using a language-based model, we apply the cost function to the algorithm written in the language. In this book, we use a language-based cost model, called the work-span model.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
A~\defn{language-based model}~takes a language as the starting point
and defines cost as a function mapping the expressions of the language
to their cost.
Such a cost function is usually defined as a recursive function over
the different forms of expressions in the language.  
To analyze an algorithm by using a language-based model, we apply the
cost function to the algorithm written in the language.
In this book, we use a language-based cost model, called the work-span
model.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->


<segment name='subsection'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
The Work-Span Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
The Work-Span Model
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::language:ws
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::language-based
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::language-based
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Our language-based cost model is based on two cost metrics: work and span. Roughly speaking, the  <strong><em>work</em></strong> of a computation corresponds to the total number of operations it performs, and the <strong><em>span</em></strong> corresponds to the longest chain of dependencies in the computation. The work and span functions can be defined for essentially any language ranging from low-level languages such as C to higher level languages such as the ML family. In this book, we use the SPARC language.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Our language-based cost model is based on two cost metrics: work and
span.  Roughly speaking, the~\defn{work} of a computation corresponds to
the total number of operations it performs, and the \defn{span} corresponds
to the longest chain of dependencies in the computation.
The work and span functions can be defined for essentially any
language ranging from low-level languages such as C to higher level
languages such as the ML family.  
In this book, we use the \PML{} language.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::notation-for-work-and-span
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Notation for Work and Span
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Notation for Work and Span
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::notation-for-work-and-span
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>For an expressions <span class="math inline">\(e\)</span>, or an algorithm written in a language, we write <span class="math inline">\(W(e)\)</span> for the work of <span class="math inline">\(e\)</span> and <span class="math inline">\(S(e)\)</span> for the span of <span class="math inline">\(e\)</span>.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
For an expressions $e$, or an algorithm written in a language, we write 
$W(e)$ for the work of $e$ and $S(e)$ for the span of $e$.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:xmpl:analysis::models::notation
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::notation
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>For example, the notation <span class="math display">\[W(7 + 3)\]</span> denotes the work of adding <span class="math inline">\(7\)</span> and <span class="math inline">\(3\)</span>.</p>
<p>The notation <span class="math display">\[S(\mathit{fib}(11))\]</span> denotes the span for calculating the 11<span class="math inline">\(^{th}\)</span> Fibonacci number using some particular code for <span class="math inline">\(\mathit{fib}\)</span>.</p>
<p>The notation <span class="math display">\[W(\mathit{mySort}(a))\]</span> denotes the work for <span class="math inline">\(\mathit{mySort}\)</span> applied to the sequence <span class="math inline">\(a\)</span>.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
For example, 
the notation
\[
W(7 + 3)
\]
denotes the work of adding $7$ and $3$.

The notation 
\[
S(\cdvar{fib}(11))
\]
denotes the span for calculating the 11$^{th}$ Fibonacci number using
some particular code for $\cdvar{fib}$.

The notation 
\[
W(\cdvar{mySort}(a))
\]
denotes the work for $\cdvar{mySort}$ applied to the sequence~$a$.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::using-input-size
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Using Input Size
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Using Input Size
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::using-input-size
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Note that in the third example the sequence <span class="math inline">\(a\)</span> is not defined within the expression. Therefore we cannot say in general what the work is as a fixed value. However, we might be able to use asymptotic analysis to write a cost in terms of the length of <span class="math inline">\(a\)</span>, and in particular if <span class="math inline">\(\texttt{mySort}\)</span> is a good sorting algorithm we would have: <span class="math display">\[W(\texttt{mySort}(a)) = O(|a| \log |a|).\]</span> Often instead of writing <span class="math inline">\(|a|\)</span> to indicate the size of the input, we use <span class="math inline">\(n\)</span> or <span class="math inline">\(m\)</span> as shorthand. Also if the cost is for a particular algorithm, we use a subscript to indicate the algorithm. This leads to the following notation <span class="math display">\[W_{\texttt{mySort}}(n) = O(n \log n).\]</span> where <span class="math inline">\(n\)</span> is the size of the input of <span class="math inline">\(\texttt{mysort}\)</span>. When obvious from the context (e.g. when in a section on analyzing <span class="math inline">\(\texttt{mySort}\)</span>) we typically drop the subscript, writing <span class="math inline">\(W(n) = O(n \log n)\)</span>.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Note that in the third example the sequence $a$ is not defined within
the expression.  Therefore we cannot say in general what the work is
as a fixed value.  However, we might be able to use asymptotic
analysis to write a cost in terms of the length of $a$, and in
particular if $\cd{mySort}$ is a good sorting algorithm we would have:
\[
W(\cd{mySort}(a)) = O(|a| \log |a|).
\]
Often instead of writing  $|a|$ to indicate the size of the input, we
use $n$ or $m$ as shorthand.  Also if the cost is for a particular
algorithm, we use a subscript to indicate the algorithm. This leads to
the following notation
\[
W_{\cd{mySort}}(n) = O(n \log n).
\]
where $n$ is the size of the input of $\cd{mysort}$.  When obvious
from the context (e.g. when in a section on analyzing $\cd{mySort}$)
we typically drop the subscript, writing $W(n) = O(n \log n)$.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::pml
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
SPARC Cost Model
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
\PML{} Cost Model
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::pml
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p> The work and span of SPARC expressions are defined below. In the definition and throughout this book, we write <span class="math inline">\(W(e)\)</span> for the work of the expression and <span class="math inline">\(S(e)\)</span> for its span. Both work and span are cost functions that map an expression to a integer cost. As common in language-based models, the definition follows the definition of expressions for SPARC (Chapter <a href="#ch:sparc" data-reference-type="ref" data-reference="ch:sparc">[ch:sparc]</a>). We make one simplifying assumption in the presentation: instead of considering general bindings, we only consider the case where a single variable is bound to the value of the expression.</p>
<p>In the definition, the notation <span class="math inline">\(\mbox{Eval}(e)\)</span> evaluates the expression <span class="math inline">\(e\)</span> and returns the result, and the notation <span class="math inline">\([v/x]~e\)</span> indicates that all free (unbound) occurrences of the variable <span class="math inline">\(x\)</span> in the expression <span class="math inline">\(e\)</span> are replaced with the value <span class="math inline">\(v\)</span>.</p>
<p><span class="math display">\[\begin{array}{lcl}  
W(v) &amp; = &amp; 1   
\\  
W(\texttt{lambda}~{p}\,.\,e)  &amp; = &amp; 1   
\\  
  W(e_1~e_2) &amp; =  &amp; W(e_1) + W(e_2) + W([\mbox{Eval}(e_2)/x]~e_3) + 1   
\\  
          &amp;    &amp; \mbox{where}~\mbox{Eval}(e_1) = \texttt{lambda}~{x}\,.\,e_3  
\\  
W(e_1~\texttt{op}~e_2) &amp; = &amp;  W(e_1) + W(e_2) + 1  
\\  
W(e_1~,~e_2) &amp; = &amp; W(e_1) + W(e_2) + 1  
\\  
W(e_1~||~e_2) &amp;=&amp; W(e_1) + W(e_2) + 1  
\\[1ex]  
W\left(  
\begin{array}{l}  
\texttt{if}~e_1  
\\  
\texttt{then}~e_2  
\\  
\texttt{else}~e_3  
\end{array}  
\right)    
&amp; = &amp;   
\left\{  
\begin{array}{ll}  
W(e_1) + W(e_2) + 1 &amp; \mbox{if}~\mbox{Eval}(e_1) = \texttt{true}  
\\  
W(e_1) + W(e_3) + 1 &amp; \mbox{otherwise}  
\end{array}\right.  
\\[1ex]  
W\left(  
\begin{array}{l}  
\texttt{let}~x=e_1~  
\\  
\texttt{in}~e_2~\texttt{end}
\end{array}  
\right)   
&amp; = &amp; W(e_1) + W([\mbox{Eval}(e_1)/x]~e_2) + 1  
\\[1ex]  
W( ( e ) ) &amp; = &amp; W(e)  
\end{array}\]</span> <span class="math display">\[\begin{array}{lcl}  
S(v) &amp; = &amp; 1   
\\  
S(\texttt{lambda}~{p}\,.\,e)  &amp; = &amp; 1   
\\  
S(e_1~e_2) &amp; =  &amp; S(e_1) + S(e_2) + S([\mbox{Eval}(e_2)/x]~e_3) + 1   
\\  
          &amp;    &amp; \mbox{where}~\mbox{Eval}(e_1) = \texttt{lambda}~{x}\,.\,e_3  
\\  
S(e_1~\mbox{op}~e_2) &amp; = &amp;  S(e_1) + S(e_2) + 1  
\\  
S(e_1~,~e_2) &amp; = &amp; S(e_1) + S(e_2) + 1  
\\  
S(e_1~||~e_2) &amp;=&amp; \max{}{(S(e_1),S(e_2))} + 1  
\\[1ex]  
S\left(  
\begin{array}{l}  
\texttt{if}~e_1  
\\  
\texttt{then}~e_2  
\\  
\texttt{else}~e_3  
\end{array}  
\right)  
&amp; = &amp;   
\left\{  
\begin{array}{ll}  
S(e_1) + S(e_2) + 1 &amp; \mbox{Eval}(e_1) = \texttt{true}\\  
S(e_1) + S(e_3) + 1 &amp; \mbox{otherwise}  
\end{array}\right.  
\\[1ex]  
S\left(  
\begin{array}{l}  
\texttt{let}~x=e_1~  
\\  
\texttt{in}~e_2~\texttt{end}
\end{array}  
\right)   
&amp; = &amp; S(e_1) + S([\mbox{Eval}(e_1)/x]~e_2) + 1  
\\[1ex]  
S( ( e ) ) &amp; = &amp; S(e)  
\\  
\end{array}\]</span></p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
\label{def:analysis::models::pml}
The work and span of \PML{} expressions are defined below.
In the definition and throughout this book, we write~$W(e)$ for the
work of the expression and~$S(e)$ for its span. 
Both work and span are cost functions that map an expression to a
integer cost.
As common in language-based models, the definition follows the
definition of expressions for \PML{} (\chref{sparc}). 
We make one simplifying assumption in the presentation: instead of
considering general bindings, we only consider the case where a single
variable is bound to the value of the expression.

In the definition, the notation $\eval{e}$ evaluates the expression
$e$ and returns the result, and the notation $[v/x]~e$ indicates that
all free (unbound) occurrences of the variable $x$ in the expression
$e$ are replaced with the value $v$.

\[
\begin{array}{lcl}
W(v) & = & 1 
\\
W(\cfn{p}{e})  & = & 1 
\\
  W(e_1~e_2) & =  & W(e_1) + W(e_2) + W([\eval{e_2}/x]~e_3) + 1 
\\
          &    & \mbox{where}~\eval{e_1} = \cfn{x}{e_3}
\\
W(e_1~\cd{op}~e_2) & = &  W(e_1) + W(e_2) + 1
\\
W(e_1~,~e_2) & = & W(e_1) + W(e_2) + 1
\\
W(e_1~||~e_2) &=& W(e_1) + W(e_2) + 1
\\[1ex]
W\left(
\begin{array}{l}
\cif~e_1
\\
\cthen~e_2
\\
\celse~e_3
\end{array}
\right)  
& = & 
\left\{
\begin{array}{ll}
W(e_1) + W(e_2) + 1 & \mbox{if}~\eval{e_1} = \cd{true}
\\
W(e_1) + W(e_3) + 1 & \mbox{otherwise}
\end{array}\right.
\\[1ex]
W\left(
\begin{array}{l}
\clet~x=e_1~
\\
\cin~e_2~\cend
\end{array}
\right) 
& = & W(e_1) + W([\eval{e_1}/x]~e_2) + 1
\\[1ex]
W( ( e ) ) & = & W(e)
\end{array}
\]
\medskip
\[
\begin{array}{lcl}
S(v) & = & 1 
\\
S(\cfn{p}{e})  & = & 1 
\\
S(e_1~e_2) & =  & S(e_1) + S(e_2) + S([\eval{e_2}/x]~e_3) + 1 
\\
          &    & \mbox{where}~\eval{e_1} = \cfn{x}{e_3}
\\
S(e_1~\mbox{op}~e_2) & = &  S(e_1) + S(e_2) + 1
\\
S(e_1~,~e_2) & = & S(e_1) + S(e_2) + 1
\\
S(e_1~||~e_2) &=& \max{}{(S(e_1),S(e_2))} + 1
\\[1ex]
S\left(
\begin{array}{l}
\cif~e_1
\\
\cthen~e_2
\\
\celse~e_3
\end{array}
\right)
& = & 
\left\{
\begin{array}{ll}
S(e_1) + S(e_2) + 1 & \eval{e_1} = \cd{true}\\
S(e_1) + S(e_3) + 1 & \mbox{otherwise}
\end{array}\right.
\\[1ex]
S\left(
\begin{array}{l}
\clet~x=e_1~
\\
\cin~e_2~\cend
\end{array}
\right) 
& = & S(e_1) + S([\eval{e_1}/x]~e_2) + 1
\\[1ex]
S( ( e ) ) & = & S(e)
\\
\end{array}
\]
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:xmpl:analysis::models::consider
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::consider
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Consider the expression <span class="math inline">\(e_1 + e_2\)</span> where <span class="math inline">\(e_1\)</span> and <span class="math inline">\(e_2\)</span> are themselves other expressions (e.g., function application). Note that this is an instance of the rule <span class="math inline">\(e_1~\mbox{op}~e_2\)</span>, where is a plus operation. In SPARC, we evaluate this expressions by first evaluating <span class="math inline">\(e_1\)</span> and then <span class="math inline">\(e_2\)</span> and then computing the sum. The work of the expressions is therefore <span class="math display">\[W(e_1 + e_2) = W(e_1) + W(e_2) + 1  
.\]</span> The additional <span class="math inline">\(1\)</span> accounts for computation of the sum.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Consider the expression $e_1 + e_2$ where $e_1$ and $e_2$ are
themselves other expressions (e.g., function application).  Note that
this is an instance of the rule $e_1~\mbox{op}~e_2$, where \mbox{op} is a plus operation.
In \PML{}, we evaluate this expressions by first evaluating $e_1$ and
then $e_2$ and then computing the sum.  The work of the expressions is
therefore
\[
W(e_1 + e_2) = W(e_1) + W(e_2) + 1
.
\]
The additional $1$ accounts for computation of the sum.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- cluster -->

<segment name='flex'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::span
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::span
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>For the <span class="math inline">\(\texttt{let}\)</span> expression, we first evaluate <span class="math inline">\(e_1\)</span> and assign it to <span class="math inline">\(x\)</span> before we can evaluate <span class="math inline">\(e_2\)</span>. Hence the fact that the span is composed sequentially, i.e., by adding the spans.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
For the $\cd{let}$ expression, we first evaluate $e_1$ and assign it
to $x$ before we can evaluate $e_2$.  Hence the fact that the span is
composed sequentially, i.e., by adding the spans.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::expressions
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>In SPARC, <span class="math inline">\(\texttt{let}\)</span> expressions compose sequentially. <span class="math display">\[\begin{array}{lcl}  
W(\texttt{let}~y = f(x)~\texttt{in}~g(y)~\texttt{end}) &amp; = &amp; 1 + W(f(x)) + W(g(y))  
\\  
S(\texttt{let}~y = f(x)~\texttt{in}~g(y)~\texttt{end}) &amp; = &amp; 1 + S(f(x)) + S(g(y))  
\end{array}\]</span></p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
In \pml, $\cd{let}$ expressions compose sequentially.
\[
\begin{array}{lcl}
W(\cd{let}~y = f(x)~\cd{in}~g(y)~\cd{end}) & = & 1 + W(f(x)) + W(g(y))
\\
S(\cd{let}~y = f(x)~\cd{in}~g(y)~\cd{end}) & = & 1 + S(f(x)) + S(g(y))
\end{array}
\]
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- flex -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:tch:analysis::models::expressions
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='teachask'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
tch:analysis::models::expressions
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>In SPARC, when are expressions evaluated in parallel?</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
In \PML{}, when are expressions evaluated in parallel?
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- teachask -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::rules
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::rules
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Note that all the rules for work and span have the same form except for parallel application, i.e., <span class="math inline">\((e_1\ ||\ e_2)\)</span>. Recall that parallel application indicates that the two expressions can be evaluated in parallel, and the result is a pair of values containing the two results. In this case we use maximum for combining the span since we have to wait for the longer of the two. In all other cases we sum both the work and span. Later we will also add a parallel construct for working with sequences.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Note that all the rules for work and span 
have the same form except for parallel application, i.e., $(e_1\ ||\ e_2)$.    
Recall that parallel application indicates that the two 
expressions can be evaluated in parallel, and the result is a pair of values 
containing the two results. 
In this case we use maximum for combining the span since we have
to wait for the longer of the two.   In all other
cases we sum both the work and span.
Later we will also add a parallel construct for working with
sequences.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='flex'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:xmpl:analysis::models::expression
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::expression
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>The expression <span class="math inline">\((\texttt{fib}(6)\ ||\ \texttt{fib}(7))\)</span> runs the two calls to <span>fib</span> in parallel and returns the pair <span class="math inline">\((8,13)\)</span>. It does work <span class="math display">\[1 + W(\texttt{fib}(6)) + W(\texttt{fib}(7))\]</span> and span <span class="math display">\[1 + \max{}(S(\texttt{fib}(6)), S(\texttt{fib}(7))).\]</span> If we know that the span of <span class="math inline">\(\texttt{fib}\)</span> grows with the input size, then the span can be simplified to <span class="math inline">\(1 + S(\texttt{fib}(7))\)</span>.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
The expression $(\cd{fib}(6)\ ||\ \cd{fib}(7))$ runs the two
calls to {\tt fib} in parallel and returns the pair $(8,13)$.   It
does work 
\[
1 + W(\cd{fib}(6)) + W(\cd{fib}(7))
\] 
and span
\[
1 + \max{}(S(\cd{fib}(6)), S(\cd{fib}(7))).
\]   
If we know that the
span of $\cd{fib}$ grows with the input size, then the span can
be simplified to $1 + S(\cd{fib}(7))$.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- flex -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:rmrk:analysis::models::assuming
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='remark'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
rmrk:analysis::models::assuming
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>When assuming purely functional programs, it is always safe to run things in parallel if there is no explicit sequencing. For the expression <span class="math inline">\(e_1 + e_2\)</span>, for example, it is safe to evaluate the two expressions in parallel, which would give the rule <span class="math display">\[S(e_1 + e_2) = \max{}(S(e_1), S(e_2)) + 1~,\]</span> i.e., we wait for the later of the two expression fo finish, and then spend one additional unit to do the addition. However, in this book we use the convention that parallelism has to be stated explicitly using <span class="math inline">\(||\)</span>.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
When assuming purely functional programs, it is
always safe to run things in parallel if there is no explicit
sequencing.     For the expression $e_1 + e_2$, for example, it is
safe to evaluate the
two expressions in parallel, which would give the rule
\[
S(e_1 + e_2) = \max{}(S(e_1), S(e_2)) + 1~,
\]
i.e., we wait for the later of the two expression fo finish, and then spend one
additional unit to do the addition.
However, in this book we use the convention that parallelism has to be stated
explicitly using $||$.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- remark -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:tch:analysis::models::construct
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='teachnote'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
tch:analysis::models::construct
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>As there is no <span class="math inline">\(||\)</span> construct in ML, in your assignments you will need to specify in comments when two calls run in parallel. We will also supply an ML function <span class="math inline">\(\texttt{par (f1,f2)}\)</span> with type <span class="math display">\[(\texttt{unit} \rightarrow\alpha) \times (\texttt{unit} \rightarrow\beta) \rightarrow\alpha  
\times \beta.\]</span> This function executes the two functions that are passed in as arguments in parallel and returns their results as a pair. For example:</p>
<p><span class="math inline">\(\texttt{par (fn =&gt; fib(6), fn =&gt; fib(7))}\)</span></p>
<p>returns the pair <span class="math inline">\((8,13)\)</span>. We need to wrap the expressions in functions in ML so that we can make the actual implementation run them in parallel. If they were not wrapped both arguments would be evaluated sequentially before they are passed to the function <span class="math inline">\(\texttt{par}\)</span>.</p>
<p>Also in the ML code you do not have the set notation <span class="math inline">\(\{f(x) : x \in A\}\)</span>, but as mentioned before, it is basically equivalent to a <span class="math inline">\(\texttt{map}\)</span>. Therefore, for ML code you can use the rules:</p>
<p><span class="math display">\[W(\mbox{\tt map } f\ \left\langle\, s_0, \ldots, s_{n-1} \,\right\rangle) = 1 + \sum_{i=0}^{n-1} W(f(s_i))\]</span> <span class="math display">\[S(\mbox{\tt map } f\ \left\langle\, s_0, \ldots, s_{n-1} \,\right\rangle) = 1 + \max{}_{i=0}^{n-1} S(f(s_i))\]</span></p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
As there is no $||$
construct in ML, in your assignments you will need to specify in comments when two calls run
in parallel.  We will also supply an ML function $\cd{par (f1,f2)}$ with
type 
\[
(\cd{unit} \ra \alpha) \times (\cd{unit} \ra \beta) \ra \alpha
\times \beta.
\]
This function executes the two functions that are passed in as
arguments in parallel and returns their results as a pair.  For
example:

$\cd{par (fn => fib(6), fn => fib(7))}$

returns the pair $(8,13)$.  We need to wrap the expressions in
functions in ML so that we can make the actual implementation run them
in parallel.  If they were not wrapped both arguments would be
evaluated sequentially before they are passed to the function
$\cd{par}$.  

Also in the ML code you do not have the set
notation $\{f(x) : x \in A\}$, but as mentioned before, it is
basically equivalent to a
$\cd{map}$.   Therefore, for ML code you can use the rules:

  \[ W(\mbox{\tt map } f\ \cseq{s_0, \ldots, s_{n-1}}) = 1 + \sum_{i=0}^{n-1} W(f(s_i)) \]
   \[S(\mbox{\tt map } f\ \cseq{s_0, \ldots, s_{n-1}}) = 1 + \max{}_{i=0}^{n-1} S(f(s_i)) \]
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- teachnote -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::average-parallelism
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Average Parallelism
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Average Parallelism
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::average-parallelism
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Parallelism, sometimes called <strong><em>average parallelism</em></strong> , is defined as the work over the span: <span class="math display">\[\overline{P}= \frac{W}{S}.\]</span> Parallelism informs us approximately how many processors we can use efficiently.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Parallelism, sometimes called \defn{average parallelism}, is
defined as the work over the span:
\[ 
\paral = \frac{W}{S}.
\]
Parallelism informs us approximately how many processors we can use
efficiently.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:xmpl:analysis::models::mergesort
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::mergesort
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>For a mergesort with work <span class="math inline">\(\Theta(n \log n)\)</span> and span <span class="math inline">\(\Theta(\log^2 n)\)</span> the parallelism would be <span class="math inline">\(\Theta(n/\log  
n)\)</span>.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
For a mergesort with work $\Theta(n \log n)$ and span
$\Theta(\log^2 n)$ the parallelism would be $\Theta(n/\log
n)$.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:xmpl:analysis::models::work
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::work
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Consider an algorithm with work <span class="math inline">\(W(n) = \Theta(n^3)\)</span> and span <span class="math inline">\(S(n) = \Theta(n \log n)\)</span>. For <span class="math inline">\(n = 10,000\)</span>, <span class="math inline">\(\overline{P}(n) \approx 10^7\)</span>, which is a lot of parallelism. But, if <span class="math inline">\(W(n) = \Theta(n^2) \approx 10^8\)</span> then <span class="math inline">\(\overline{P}(n) \approx 10^3\)</span>, which is much less parallelism. Note that the decrease in parallelism is not because of an increase in span but because of a reduction in work.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Consider an algorithm with work $W(n) = \Theta(n^3)$ and span 
$S(n) = \Theta(n \log n)$.
For $n = 10,000$, $\paral(n) \approx 10^7$, which is a lot of
parallelism.  
But, if $W(n) = \Theta(n^2) \approx 10^8$ then
$\paral(n) \approx 10^3$, which is much less parallelism. 
Note that the decrease in parallelism is not because of an increase in
span but because of a reduction in work.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:tch:analysis::models::ways
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='teachask'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
tch:analysis::models::ways
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>What are ways in which we can increase parallelism?</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
What are ways in which we can increase parallelism?
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- teachask -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::designing-parallel-algorithms
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Designing Parallel Algorithms
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Designing Parallel Algorithms
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::designing-parallel-algorithms
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>In parallel-algorithm design, we aim to keep parallelism as high as possible. Since parallelism is defined as the amount of work per unit of span, we can do this by decreasing span. We can increase parallelism by increasing work also, but this is usually not desirable. In designing parallel algorithms our goals are:</p>
<ol>
<li><p>to keep work as low as possible, and</p></li>
<li><p>to keep span as low as possible.</p></li>
</ol>
<p>Except in cases of extreme parallelism, where for example, we may have thousands or more processors available to use, the first priority is usually to keep work low, even if it comes at the cost of increasing span.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
In parallel-algorithm design, we aim to keep parallelism as high
as possible.
Since parallelism is defined as the amount of work per unit of span, 
we can do this by decreasing span.
We can increase parallelism by increasing work also, but this is
usually not desirable.
In designing parallel algorithms our goals are: 

\begin{enumerate}
\item   to keep work as low as possible, and
\item   to keep span as low as possible.
\end{enumerate}

Except in cases of extreme parallelism, where for example, we may have
thousands or more processors available to use, the first priority is
usually to keep work low, even if it comes at the cost of increasing
span.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='flex'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::work-efficiency
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Work efficiency
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Work efficiency
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::work-efficiency
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>We say that a parallel algorithm is <span> <em>work efficient</em></span> if it perform asymptotically the same work as the best known sequential algorithm for that problem.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
We say that a parallel algorithm is {\em
  work efficient} if it perform asymptotically the same work as the best known sequential algorithm for that problem.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::comparison-based
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>A (comparison-based) parallel sorting algorithm with <span class="math inline">\(\Theta(n\log{n})\)</span> work is work efficient; one with <span class="math inline">\(\Theta(n^2)\)</span> is not, because we can sort sequentially with <span class="math inline">\(\Theta(n\log{n})\)</span> work.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
A (comparison-based) parallel sorting algorithm with
$\Theta(n\log{n})$ work is work efficient; one with $\Theta(n^2)$ is
not, because we can sort sequentially with $\Theta(n\log{n})$ work.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- flex -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:nt:analysis::models::book
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='note'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
nt:analysis::models::book
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>In this book, we will mostly cover work-efficient algorithms where the work is the same or close to the same as the best sequential time. Among the algorithm that have the same work as the best sequential time, our goal will be to achieve the greatest parallelism.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
In this book, we will mostly cover work-efficient algorithms where
the work is the same or close to the same as the best sequential time.
Among the algorithm that have the same work as the best sequential
time, our goal will be to achieve the greatest parallelism.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- note -->

</segment> <!-- cluster -->


</segment> <!-- subsection -->

<segment name='subsection'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
Scheduling
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Scheduling
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::language::scheduling
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::scheduling
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::scheduling
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Scheduling involves executing a parallel program by mapping the computation over the processors in such a way to minimize the completion time and possibly, the use of other resources such as space and energy. There are many forms of scheduling. This section describes the scheduling problem and briefly reviews one particular technique called greedy scheduling.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Scheduling involves executing a parallel program by mapping the
computation over the processors in such a way to minimize
the completion time and possibly, the use of other resources such as
space and energy.
There are many forms of scheduling.
This section describes the scheduling problem and briefly reviews one
particular technique called greedy scheduling.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->


<segment name='subsubsection'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
Scheduling Problem
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Scheduling Problem
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::scheduling-problem
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='flex'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::advantage
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::advantage
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>An important advantage of the work-span model is that it allows us to design parallel algorithms without having to worry about the details of how they are executed on an actual parallel machine. In other words, we never have to worry about mapping of the parallel computation to processors, i.e., scheduling.</p>
<p>Scheduling can be challenging, because a parallel algorithm generates independently executable <strong><em>tasks</em></strong> on the fly as it runs, and it can generate a large number of them, typically many more than the number of processors.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
An important advantage of the work-span model is that it allows us to
design parallel algorithms without having to worry about the details
of how they are executed on an actual parallel machine. 
In other words, we never have to worry about mapping of the parallel
computation to processors, i.e., scheduling. 

Scheduling can be challenging, because a parallel algorithm generates
independently executable \defn{tasks} on the fly as it runs, and it
can generate a large number of them, typically many more than the
number of processors.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

<atom name='example'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xmpl:analysis::models::parallel
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>A parallel algorithm with <span class="math inline">\(\Theta(n/\lg{n})\)</span> parallelism can easily generate millions of parallel subcomptutations or task at the same time, even when running on a multicore computer with <span class="math inline">\(10\)</span> cores. For example, for <span class="math inline">\(n = 10^8\)</span>, the algorithm may generate millions of independent tasks.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
A parallel algorithm with $\Theta(n/\lg{n})$ parallelism can easily
generate millions of parallel subcomptutations or task at the same time,
even when running on a multicore computer with $10$ cores.
For example, for $n = 10^8$, the algorithm may generate millions of
independent tasks.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- example -->

</segment> <!-- flex -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::scheduler
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Scheduler
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Scheduler
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::scheduler
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>A  <strong><em>scheduling algorithm</em></strong> or a  <strong><em>scheduler</em></strong> is an algorithm for mapping parallel tasks to available processors. The scheduler works by taking all parallel tasks, which are generated dynamically as the algorithm evaluates, and assigning them to processors. If only one processor is available, for example, then all tasks will run on that one processor. If two processors are available, the task will be divided between the two.</p>
<p>Schedulers are typically designed to minimize the execution time of a parallel computation, but minimizing space usage is also important.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
A~\defn{scheduling algorithm} or a~\defn{scheduler} is an algorithm
for mapping parallel tasks to available processors.
The scheduler works by taking all parallel tasks, which are generated
dynamically as the algorithm evaluates, and assigning them to
processors.  
If only one processor is available, for example, then all
tasks will run on that one processor.  If two processors are available,
the task will be divided between the two.

Schedulers are typically designed to minimize the execution time of a
parallel computation,
but 
minimizing space usage is also important.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:tch:analysis::models::think
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='teachask'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
tch:analysis::models::think
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Can you think of a scheduling algorithm?</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Can you think of a scheduling algorithm?
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- teachask -->

</segment> <!-- cluster -->


</segment> <!-- subsubsection -->

<segment name='subsubsection'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
Greedy Scheduling
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Greedy Scheduling
]]>
</field> <!-- title_src -->
<field name='label'>
sec:analysis::models::greedy-scheduling
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::greedy-scheduler
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Greedy Scheduler
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Greedy Scheduler
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::greedy-scheduler
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>We say that a scheduler is  <strong><em>greedy</em></strong> if whenever there is a processor available and a task ready to execute, then it assigns the task to the processor and starts running it immediately. Greedy schedulers have an important property that is summarized by the greedy scheduling principle.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
We say that a scheduler is~\defn{greedy} if whenever there is a
processor available and a task ready to execute, then it assigns the
task to the processor and starts running it immediately.  Greedy
schedulers have an important property that is summarized by the greedy
scheduling principle.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::greedy
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Greedy Scheduling Principle
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Greedy Scheduling Principle
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::greedy
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p> The <strong><em>greedy scheduling principle</em></strong> postulates that if a computation is run on <span class="math inline">\(P\)</span> processors using a greedy scheduler, then the total time (clock cycles) for running the computation is bounded by <span class="math display">\[\begin{array}{lll}  
T_P &amp; &lt; &amp; \frac{W}{P} + S  
\end{array}\]</span> where <span class="math inline">\(W\)</span> is the work of the computation, and <span class="math inline">\(S\)</span> is the span of the computation (both measured in units of clock cycles).</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
\label{def:analysis::models::greedy}
The \defn{greedy scheduling principle} postulates that if a
computation is run on $P$ processors using a greedy scheduler, then
the total time (clock cycles) for running the computation is bounded
by
\[
\begin{array}{lll}
T_P & < & \frac{W}{P} + S
\end{array}
\]
where $W$ is the work of the computation, and $S$ is the span of the
computation (both measured in units of clock cycles).
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:grm:analysis::models::optimality-of-greedy-schedulers
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='gram'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Optimality of Greedy Schedulers
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Optimality of Greedy Schedulers
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
grm:analysis::models::optimality-of-greedy-schedulers
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>This simple statement is powerful.</p>
<p>Firstly, the time to execute the computation cannot be less than <span class="math inline">\(\frac{W}{P}\)</span> clock cycles since we have a total of <span class="math inline">\(W\)</span> clock cycles of work to do and the best we can possibly do is divide it evenly among the processors.</p>
<p>Secondly, the time to execute the computation cannot be any less than <span class="math inline">\(S\)</span> clock cycles, because <span class="math inline">\(S\)</span> represents the longest chain of sequential dependencies. Therefore we have</p>
<p><span class="math display">\[T_p \geq \max{}\left(\frac{W}{P},S\right).\]</span></p>
<p>We therefore see that a greedy scheduler does reasonably close to the best possible. In particular <span class="math inline">\(\frac{W}{P} + S\)</span> is never more than twice <span class="math inline">\(\max{}(\frac{W}{P},S)\)</span>.</p>
<p>Furthermore, greedy scheduling is particularly good for algorithms with abundant parallellism. To see this, let’s rewrite the inequality of the Greedy Principle in terms of the parallelism <span class="math inline">\(\overline{P}= W/S\)</span>: <span class="math display">\[\begin{array}{lll}  
T_P &amp; &lt; &amp; \frac{W}{P} + S \\  
    &amp; = &amp;  \frac{W}{P} + \frac{W}{\overline{P}{}}\\  
    &amp; = &amp;  \frac{W}{P}\left(1 + \frac{P}{\overline{P}{}}\right).  
\end{array}\]</span> Therefore, if <span class="math inline">\(\overline{P}{} \gg P\)</span>, i.e., the parallelism is much greater than the number of processors, then the parallel time <span class="math inline">\(T_P\)</span> is close to <span class="math inline">\(W/P\)</span>, the best possible. In this sense, we can view parallelism as a measure of the number of processors that can be used effectively.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
This simple statement is powerful. 

Firstly, the time to execute the computation cannot be less than
$\frac{W}{P}$ clock cycles since we have a total of $W$ clock cycles
of work to do and the best we can possibly do is divide it evenly
among the processors.

Secondly, the time to execute the computation cannot be any less than
$S$ clock cycles, because $S$ represents the longest chain of
sequential dependencies.  Therefore we have

\[
T_p \geq \max{}\left(\frac{W}{P},S\right).
\]

We therefore see that a greedy scheduler does reasonably close to the
best possible.  In particular $\frac{W}{P} + S$ is never more than
twice $\max{}(\frac{W}{P},S)$.


Furthermore, greedy scheduling is particularly good for algorithms
with abundant parallellism.  To see this, let's rewrite the inequality
of the Greedy Principle
in terms of the parallelism $\paral = W/S$:
\[
\begin{array}{lll}
T_P & < & \frac{W}{P} + S \\
    & = &  \frac{W}{P} + \frac{W}{\paral{}}\\
    & = &  \frac{W}{P}\left(1 + \frac{P}{\paral{}}\right).
\end{array}
\]
Therefore, if $\paral{} \gg P$, i.e., the parallelism is much greater
than the number of processors, then the parallel time $T_P$ is close
to $W/P$, the best possible.  In this sense, we can view parallelism
as a measure of the number of processors that can be used effectively.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- gram -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:def:analysis::models::speedup
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='definition'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
Speedup
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
Speedup
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
def:analysis::models::speedup
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>The <strong><em>speedup</em></strong> <span class="math inline">\(S_P\)</span> of a <span class="math inline">\(P\)</span>-processor parallel execution over a sequential one is defined as <span class="math display">\[S_P = T_s / T_P,\]</span> where <span class="math inline">\(T_S\)</span> denotes the sequential time. We use the term <strong><em>perfect speedup</em></strong> to refer to a speedup that is equal to <span class="math inline">\(P\)</span>.</p>
<p>When assessing speedups, it is important to select the best sequential algorithm that solves the same problem (as the parallel one).</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
The \defn{speedup} $S_P$ of a $P$-processor parallel execution over a
sequential one is defined as
\[
S_P = T_s / T_P, 
\]
where $T_S$ denotes the sequential time.
We use the term \defn{perfect speedup} to refer to a speedup that is
equal to $P$.

When assessing speedups, it is important to select the best sequential
algorithm that solves the same problem (as the parallel one).
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- definition -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:xrcs:analysis::models::describe
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='exercise'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
xrcs:analysis::models::describe
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Describe the conditions under which a parallel algorithm would obtain near perfect speedups.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Describe the conditions under which a parallel algorithm would obtain
near perfect speedups.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- exercise -->

</segment> <!-- cluster -->

<segment name='cluster'>
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='label'>
grp:rmrk:analysis::models::greedy
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->

<atom name='remark'>
<field name='pl'>
...NOT.PROVIDED.PL...
</field> <!-- pl -->
<field name='pl_version'>
...NOT.PROVIDED.PL_VERSION...
</field> <!-- pl_version -->
<field name='title'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title -->
<field name='title_src'>
<![CDATA[
...NOT.PROVIDED.TITLE...
]]>
</field> <!-- title_src -->
<field name='cover'>
...NOT.PROVIDED.COVER...
</field> <!-- cover -->
<field name='sound'>
...NOT.PROVIDED.SOUND...
</field> <!-- sound -->
<field name='label'>
rmrk:analysis::models::greedy
</field> <!-- label -->
<field name='depend'>
...NOT.PROVIDED.DEPEND...
</field> <!-- depend -->
<field name='point_value'>
0.0
</field> <!-- point_value -->
<field name='body'>
<![CDATA[
<p>Greedy Scheduling Principle does not account for the time it requires to compute the (greedy) schedule, assuming instead that such a schedule can be created instantaneously and at no cost. This is of course unrealistic and there has been much work on algorithms that attempt to match the Greedy Scheduling Principle. No real schedulers can match it exactly, because scheduling itself requires work. For example, there will surely be some delay from when a task becomes ready for execution and when it actually starts executing. In practice, therefore, the efficiency of a scheduler is quite important to achieving good efficiency. Because of this, the greedy scheduling principle should only be viewed as an asymptotic cost estimate in much the same way that the RAM model or any other computational model should be just viewed as an asymptotic estimate of real time.</p>
]]>
</field> <!-- body -->
<field name='body_src'>
<![CDATA[
Greedy Scheduling Principle does not account for the time it requires
to compute the (greedy) schedule, assuming instead that such a
schedule can be created instantaneously and at no cost.
This is of course unrealistic and there has been much work on
algorithms that attempt to match the Greedy Scheduling Principle.
No real schedulers can match it exactly, because scheduling itself
requires work.
For example, there will surely be some delay from when a task becomes
ready for execution and when it actually starts executing.
In practice, therefore, the efficiency of a scheduler is quite
important to achieving good efficiency.  
Because of this, the greedy scheduling principle should only be viewed
as an asymptotic cost estimate in much the same way that the RAM model
or any other computational model should be just viewed as an
asymptotic estimate of real time.
]]>
</field> <!-- body_src -->

<field name='caption'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption -->
<field name='caption_src'>
<![CDATA[
...NOT.PROVIDED.CAPTION...
]]>
</field> <!-- caption_src -->
</atom> <!-- remark -->

</segment> <!-- cluster -->


</segment> <!-- subsubsection -->

</segment> <!-- subsection -->

</segment> <!-- section -->

</segment> <!-- chapter -->
